openapi: 3.0.0
info:
  version: '2.2.12'
  title: 'Xero Payroll NZ'
  description: 'This is the Xero Payroll API for orgs in the NZ region.'
  termsOfService: "https://developer.xero.com/xero-developer-platform-terms-conditions/"
  contact:
    name: "Xero Platform Team"
    email: "api@xero.com"
    url: "https://developer.xero.com"
tags:
  - name: PayrollNz
servers:
  - description: Xero Payroll NZ API
    url: https://api.xero.com/payroll.xro/2.0
paths:
  /Employees:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read]
      tags:
        - PayrollNz
      operationId: getEmployees
      x-hasPayrollUkProblem: true
      summary: searches employees
      parameters:
        - in: query
          name: firstName
          description: Filter by first name
          schema:
            type: string
          example: John
        - in: query
          name: lastName
          description: Filter by last name
          schema:
            type: string
          example: Johnson
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
              example: '{
                          "id": "377503e0-400b-4565-b750-fd206a784094",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-24T20:16:14.6198711",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 1,
                            "itemCount": 8
                          },
                          "problem": null,
                          "employees": [
                            {
                              "employeeID": "68342973-c405-4b86-b5d3-d7b877c27995",
                              "firstName": "Casual",
                              "lastName": "Worker",
                              "dateOfBirth": "1990-12-01T00:00:00",
                              "gender": "M",
                              "email": null,
                              "phoneNumber": null,
                              "startDate": "2019-02-07T00:00:00",
                              "address": {
                                "addressLine1": "30 King ST",
                                "addressLine2": null,
                                "city": "Rangiora",
                                "suburb": null,
                                "countryName": "NEW ZEALAND",
                                "postCode": "7400"
                              },
                              "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                              "updatedDateUTC": "2019-09-24T05:08:45",
                              "createdDateUTC": "2019-09-22T23:58:23",
                              "endDate": null
                            },
                            {
                              "employeeID": "1c4f0c92-03ad-43f2-a690-ee51397ece6a",
                              "firstName": "GST",
                              "lastName": "Contractor",
                              "dateOfBirth": null,
                              "gender": null,
                              "email": null,
                              "phoneNumber": null,
                              "startDate": "2019-01-30T00:00:00",
                              "address": {
                                "addressLine1": null,
                                "addressLine2": null,
                                "city": null,
                                "suburb": null,
                                "countryName": null,
                                "postCode": null
                              },
                              "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                              "updatedDateUTC": "2019-09-23T00:16:25",
                              "createdDateUTC": "2019-09-23T00:12:16",
                              "endDate": null
                            }
                          ]
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post: 
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployee
      x-hasPayrollUkProblem: true
      summary: creates employees
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeObject'
              example: '{
                        "id": "b265854f-200e-4dfd-a774-dd84d600a2d4",
                        "providerName": "java-sdk-oauth2-dev-02",
                        "dateTimeUTC": "2020-08-24T20:27:22.5779577",
                        "httpStatusCode": "OK",
                        "pagination": null,
                        "problem": null,
                        "employee": {
                          "employeeID": "658be485-3feb-402e-9e77-ac17623aad42",
                          "firstName": "Mike",
                          "lastName": "Johntzxzpxhmkgson",
                          "dateOfBirth": "2000-01-01T00:00:00",
                          "gender": "M",
                          "email": "83139@starkindustries.com",
                          "phoneNumber": null,
                          "startDate": null,
                          "address": {
                            "addressLine1": "101 Green St",
                            "addressLine2": null,
                            "city": "San Francisco",
                            "suburb": null,
                            "countryName": null,
                            "postCode": "4351"
                          },
                          "payrollCalendarID": null,
                          "updatedDateUTC": "2020-08-24T20:27:22",
                          "createdDateUTC": "2020-08-24T20:27:22",
                          "endDate": null
                        }
                      }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
            example: '{
                        "title": "Mr",
                        "firstName": "Mike",
                        "lastName": "Johntzxzpxhmkgson",
                        "dateOfBirth": "2000-01-01",
                        "address": {
                          "addressLine1": "101 Green St",
                          "city": "San Francisco",
                          "postCode": "4351",
                          "countryName": "United Kingdom"
                        },
                        "email": "83139@starkindustries.com",
                        "gender": "M"
                      }'
  /Employees/{EmployeeId}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read,payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployee
      x-hasPayrollUkProblem: true
      summary: searches employees
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeObject'
              example: '{
                          "id": "414ec617-13bc-4bf3-9d31-d92273f37103",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-24T20:16:15.3542191",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "employee": {
                            "employeeID": "68342973-c405-4b86-b5d3-d7b877c27995",
                            "firstName": "Casual",
                            "lastName": "Worker",
                            "dateOfBirth": "1990-12-01T00:00:00",
                            "gender": "M",
                            "email": null,
                            "phoneNumber": null,
                            "startDate": "2019-02-07T00:00:00",
                            "address": {
                              "addressLine1": "30 King ST",
                              "addressLine2": null,
                              "city": "Rangiora",
                              "suburb": null,
                              "countryName": "NEW ZEALAND",
                              "postCode": "7400"
                            },
                            "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                            "updatedDateUTC": "2019-09-24T05:08:45",
                            "createdDateUTC": "2019-09-22T23:58:23",
                            "endDate": null
                          }
                        }'
    put:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: updateEmployee
      x-hasPayrollUkProblem: true
      summary: updates employee
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeObject'
              example: '{
                          "id": "c4850c8e-e45f-469b-aa7a-6ba0c4c68d35",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-24T20:29:43.3452832",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "employee": {
                            "employeeID": "68342973-c405-4b86-b5d3-d7b877c27995",
                            "firstName": "Tony",
                            "lastName": "Starkgtrzgquusrson",
                            "dateOfBirth": "1999-01-01T00:00:00",
                            "gender": "M",
                            "email": "58315@starkindustries.com",
                            "phoneNumber": null,
                            "startDate": "2019-02-07T00:00:00",
                            "address": {
                              "addressLine1": "101 Green St",
                              "addressLine2": null,
                              "city": "San Francisco",
                              "suburb": null,
                              "countryName": null,
                              "postCode": "4432"
                            },
                            "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                            "updatedDateUTC": "2020-08-24T20:29:43",
                            "createdDateUTC": "2019-09-22T23:58:23",
                            "endDate": null
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
            example: '{
                        "title": "Mr",
                        "firstName": "Tony",
                        "lastName": "Starkgtrzgquusrson",
                        "dateOfBirth": "1999-01-01",
                        "address": {
                          "addressLine1": "101 Green St",
                          "city": "San Francisco",
                          "postCode": "4432",
                          "countryName": "United Kingdom"
                        },
                        "email": "58315@starkindustries.com",
                        "gender": "M"
                      }'
  /Employees/{EmployeeId}/Employment:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post: 
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployment
      x-hasPayrollUkProblem: true
      summary: creates employment
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentObject'
              example: '{
                          "id": "ea57c31b-dd2c-462b-8421-1b00d7af6bfa",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-24T20:53:58.8624623",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "employment": {
                            "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                            "startDate": "2020-09-02T00:00:00"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employment'
            example: '{
                        "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                        "startDate": "2020-09-02"
                      }'
  /Employees/{EmployeeId}/Tax:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read,payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeeTax
      x-hasPayrollUkProblem: true
      summary: searches tax records for an employee 
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeTaxObject'
              example: '{
                          "id": "aab8034e-3fb9-4f93-b6c2-c5e294d50714",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-24T20:57:27.5434491",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "employeeTax": {
                            "irdNumber": "111111111",
                            "taxCode": "M",
                            "esctRatePercentage": 17.5,
                            "isEligibleForKiwiSaver": true,
                            "hasSpecialStudentLoanRate": false,
                            "specialStudentLoanRatePercentage": null,
                            "specialTaxRatePercentage": null,
                            "kiwiSaverContributions": "MakeContributions",
                            "kiwiSaverOptOutDate": null,
                            "kiwiSaverContributionHolidayEndDate": null,
                            "kiwiSaverEmployeeContributionRatePercentage": 3,
                            "kiwiSaverEmployerContributionRatePercentage": 3,
                            "kiwiSaverEmployerSalarySacrificeContributionRatePercentage": 0,
                            "hasStudentLoanBalance": false,
                            "studentLoanBalance": null,
                            "studentLoanAsAt": null
                          }
                        }'
    post: 
      security:
        - OAuth2: [payroll.employees.read,payroll.employees]
      tags:
        - PayrollNz
      operationId: updateEmployeeTax
      x-hasPayrollUkProblem: true
      summary: updates the tax records for an employee 
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeTaxObject'
              example: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeTax'
            example: ''
  /Employees/{EmployeeId}/openingBalances:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read,payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeeOpeningBalances
      x-hasPayrollUkProblem: true
      summary: retrieve employee openingbalances
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeOpeningBalancesObject'
              example: ''
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployeeOpeningBalances
      x-hasPayrollUkProblem: true
      summary: creates employee opening balances
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeOpeningBalancesObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeOpeningBalances'
            example: ''
  /Employees/{EmployeeId}/Leave:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read,payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeeLeaves
      x-hasPayrollUkProblem: true
      summary: search employee leave records
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaves'
              example: '{
                          "id": "8d136348-5df4-4298-80b5-41ddaa990533",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T16:57:18.4657329",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leave": [
                            {
                              "leaveID": "e311d45f-122e-4fbf-b068-4e3f92dd2729",
                              "leaveTypeID": "0441497f-5dc7-4cd3-a90d-f2e07e21b2a6",
                              "description": "Holiday Pay Payout",
                              "startDate": "2019-07-01T00:00:00",
                              "endDate": "2019-07-07T00:00:00",
                              "periods": [
                                {
                                  "periodStartDate": "2019-07-01T00:00:00",
                                  "periodEndDate": "2019-07-07T00:00:00",
                                  "numberOfUnits": 36,
                                  "periodStatus": "Completed"
                                }
                              ],
                              "updatedDateUTC": "2019-09-24T05:08:44"
                            }
                          ]
                        }'
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployeeLeave
      x-hasPayrollUkProblem: true
      summary: creates employee leave records
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveObject'
              example: '{
                          "id": "14ce3e0c-c4ac-4176-bb1c-dfb30efa0098",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T20:29:55.4086404",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leave": {
                            "leaveID": "82a04ba6-a5cc-4e7d-86d4-b9f381a494e8",
                            "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4",
                            "description": "Creating a Desription",
                            "startDate": "2020-04-24T00:00:00",
                            "endDate": "2020-04-26T00:00:00",
                            "periods": [
                              {
                                "periodStartDate": "2020-04-20T00:00:00",
                                "periodEndDate": "2020-04-26T00:00:00",
                                "numberOfUnits": 0,
                                "periodStatus": "Approved"
                              }
                            ],
                            "updatedDateUTC": "2020-08-26T20:29:55.2151561"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeLeave'
            example: '{
                        "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4",
                        "description": "Creating a Desription",
                        "startDate": "2020-04-24",
                        "endDate": "2020-04-26"
                      }'
  /Employees/{EmployeeId}/Leave/{LeaveID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: updateEmployeeLeave
      x-hasPayrollUkProblem: true
      summary: updates employee leave records
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - name: LeaveID
          in: path
          required: true
          description: Leave id for single object
          schema: 
            type: string
            format: uuid
            example: c4be24e5-e840-4c92-9eaa-2d86cd596314  
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveObject'
              example: '{
                          "id": "58969c8b-327f-4d72-a281-8a0992b0d01c",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T20:29:55.8432792",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leave": {
                            "leaveID": "82a04ba6-a5cc-4e7d-86d4-b9f381a494e8",
                            "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4",
                            "description": "Creating a Desription",
                            "startDate": "2020-04-24T00:00:00",
                            "endDate": "2020-04-26T00:00:00",
                            "periods": [
                              {
                                "periodStartDate": "2020-04-20T00:00:00",
                                "periodEndDate": "2020-04-26T00:00:00",
                                "numberOfUnits": 1,
                                "periodStatus": "Approved"
                              }
                            ],
                            "updatedDateUTC": "2020-08-26T20:29:55.8854536"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeLeave'
            example: '{
                        "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4",
                        "description": "Creating a Desription",
                        "startDate": "2020-04-24",
                        "endDate": "2020-04-26",
                        "periods": [
                          {
                            "periodStartDate": "2020-04-20",
                            "periodEndDate": "2020-04-26",
                            "numberOfUnits": 1,
                            "periodStatus": "Approved"
                          }
                        ]
                      }'
    delete:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: deleteEmployeeLeave
      x-hasPayrollUkProblem: true
      summary: deletes an employee leave record
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - name: LeaveID
          in: path
          required: true
          description: Leave id for single object
          schema: 
            type: string
            format: uuid
            example: c4be24e5-e840-4c92-9eaa-2d86cd596314  
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveObject'
              example: '{
                          "id": "2f34cc47-452f-4e56-9918-e2f430619e57",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T22:11:10.809249",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null
                        }'
  /Employees/{EmployeeId}/LeaveBalances:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read,payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeeLeaveBalances
      x-hasPayrollUkProblem: true
      summary: search employee leave balances
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveBalances'
              example: '{
                          "id": "db1cf5cb-5acf-4f68-8e23-7c52cf8999ac",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T22:26:48.0448356",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 1,
                            "itemCount": 4
                          },
                          "problem": null,
                          "leaveBalances": [
                            {
                              "name": "Holiday Pay",
                              "leaveTypeID": "0441497f-5dc7-4cd3-a90d-f2e07e21b2a6",
                              "balance": 0,
                              "typeOfUnits": "Dollars"
                            },
                            {
                              "name": "Annual Leave",
                              "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4",
                              "balance": 0,
                              "typeOfUnits": "Hours"
                            },
                            {
                              "name": "Sick Leave",
                              "leaveTypeID": "f2f994cf-1899-46f3-ad4f-5d92d78c3719",
                              "balance": 0,
                              "typeOfUnits": "Hours"
                            },
                            {
                              "name": "Alternative Holidays",
                              "leaveTypeID": "34129765-11cb-4d8c-b568-84a2219beda3",
                              "balance": 0,
                              "typeOfUnits": "Hours"
                            }
                          ]
                        }'
  /Employees/{EmployeeId}/LeavePeriods:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read, payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeeLeavePeriods
      x-hasPayrollUkProblem: true
      summary: searches employee leave periods
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - in: query
          name: startDate
          description: Filter by start date
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          description: Filter by end date
          schema:
            type: string
            format: date
          example: Johnson
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeavePeriods'
              example: '{
                          "id": "d55c453d-1d1d-4938-b5ef-fe8f690dd3cd",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T13:35:49.4407417",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "periods": [
                            {
                              "periodStartDate": "2020-02-24T00:00:00",
                              "periodEndDate": "2020-03-01T00:00:00",
                              "numberOfUnits": 0,
                              "periodStatus": null
                            },
                            {
                              "periodStartDate": "2020-03-02T00:00:00",
                              "periodEndDate": "2020-03-08T00:00:00",
                              "numberOfUnits": 0,
                              "periodStatus": null
                            }
                          ]
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Employees/{EmployeeId}/leaveSetup:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployeeLeaveSetup
      x-hasPayrollUkProblem: true
      summary: Allows you to set-up leave for a specific employee. This is required before viewing, configuring and requesting leave for an employee
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveSetupObject'
              example: '{
                          "id": "b157ba08-ea32-4bbd-bf29-fa0f79d22c64",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T16:50:48.7245664",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leaveSetup": {
                            "includeHolidayPay": null,
                            "holidayPayOpeningBalance": 10,
                            "annualLeaveOpeningBalance": 100,
                            "negativeAnnualLeaveBalancePaidAmount": null,
                            "sickLeaveHoursToAccrueAnnually": 20,
                            "sickLeaveMaximumHoursToAccrue": null,
                            "sickLeaveOpeningBalance": 10
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeLeaveSetup'
            example: '{
                        "holidayPayOpeningBalance": 10,
                        "annualLeaveOpeningBalance": 100,
                        "sickLeaveHoursToAccrueAnnually": 20,
                        "sickLeaveOpeningBalance": 10
                      }'
  /Employees/{EmployeeId}/LeaveTypes:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read, payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeeLeaveTypes
      x-hasPayrollUkProblem: true
      summary: searches employee leave types
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveTypes'
              example: '{
                          "id": "0425d7c5-a0bd-4a7c-bda6-b3da89f21eb3",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T14:25:16.004485",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leaveTypes": [
                            {
                              "leaveTypeID": "0441497f-5dc7-4cd3-a90d-f2e07e21b2a6",
                              "scheduleOfAccrual": "PercentageOfGrossEarnings",
                              "hoursAccruedAnnually": 0,
                              "maximumToAccrue": 0,
                              "openingBalance": 0,
                              "rateAccruedHourly": null,
                              "percentageOfGrossEarnings": 8,
                              "includeHolidayPayEveryPay": true,
                              "showAnnualLeaveInAdvance": null,
                              "annualLeaveTotalAmountPaid": null
                            }
                          ]
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployeeLeaveType
      x-hasPayrollUkProblem: true
      summary: creates employee leave type records
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLeaveTypeObject'
              example: '{
                          "id": "2040c10b-9b95-4c4d-8160-e3afbf7dcdea",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T14:31:54.3370081",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leaveType": {
                            "leaveTypeID": "35da97ae-05b9-427f-9a98-69157ba42cec",
                            "scheduleOfAccrual": "AnnuallyAfter6Months",
                            "hoursAccruedAnnually": 10,
                            "maximumToAccrue": 80,
                            "openingBalance": 100,
                            "rateAccruedHourly": null,
                            "percentageOfGrossEarnings": 0,
                            "includeHolidayPayEveryPay": null,
                            "showAnnualLeaveInAdvance": null,
                            "annualLeaveTotalAmountPaid": null
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeLeaveType'
            example: '{
                        "leaveTypeID": "35da97ae-05b9-427f-9a98-69157ba42cec",
                        "scheduleOfAccrual": "AnnuallyAfter6Months",
                        "hoursAccruedAnnually": 10,
                        "maximumToAccrue": 80,
                        "openingBalance": 100,
                        "rateAccruedHourly": 3.5
                      }'
  /Employees/{EmployeeId}/PaymentMethods:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read, payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeePaymentMethod
      x-hasPayrollUkProblem: true
      summary: retrieves an employee's payment method
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodObject'
              example: '{
                          "id": "8ce6977b-3b83-47a4-81b8-13aafa5bedb5",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T23:34:53.6856317",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "paymentMethod": {
                            "bankAccounts": [
                              {
                                "accountName": "Casual Worker",
                                "accountNumber": "0607050201419000",
                                "sortCode": null,
                                "particulars": null,
                                "code": null,
                                "dollarAmount": null,
                                "reference": "",
                                "calculationType": "Balance"
                              }
                            ]
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployeePaymentMethod
      x-hasPayrollUkProblem: true
      summary: creates employee payment method
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
            example: ''
  /Employees/{EmployeeId}/PayTemplates:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read, payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeePayTemplates
      x-hasPayrollUkProblem: true
      summary: searches employee pay templates
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeePayTemplates'
              example: '{
                          "id": "0d72f88e-c5cf-4114-a76b-730ddebcf170",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T15:09:19.0627389",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 0,
                            "itemCount": 0
                          },
                          "problem": null,
                          "payTemplate": {
                            "employeeID": "68342973-c405-4b86-b5d3-d7b877c27995",
                            "earningTemplates": [
                              {
                                "payTemplateEarningID": "1527cf6c-93db-41bf-aba2-9d6af1d3c499",
                                "ratePerUnit": 20,
                                "numberOfUnits": 8,
                                "fixedAmount": null,
                                "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                                "name": "Ordinary Time"
                              }
                            ]
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Employees/{EmployeeId}/PayTemplates/earnings:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployeeEarningsTemplate
      x-hasPayrollUkProblem: true
      summary: creates employee earnings template records
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarningsTemplateObject'
              example: '{
                          "id": "7c49262f-7d71-401d-9d73-10fd0822f28e",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T14:48:24.6032145",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "earningTemplate": {
                            "payTemplateEarningID": "11b4e492-5d56-4eac-a9ce-687d7b9a4a84",
                            "ratePerUnit": 20,
                            "numberOfUnits": 8,
                            "fixedAmount": null,
                            "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                            "name": "Ordinary Time"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarningsTemplate'
            example: '{
                        "ratePerUnit": 20,
                        "numberOfUnits": 8,
                        "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                        "name": "My New One"
                      }'
  /Employees/{EmployeeId}/PayTemplates/earnings/{PayTemplateEarningID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: updateEmployeeEarningsTemplate
      x-hasPayrollUkProblem: true
      summary: updates employee earnings template records
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - name: PayTemplateEarningID
          in: path
          required: true
          description:  Id for single pay template earnings object
          schema: 
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarningsTemplateObject'
              example: '{
                          "id": "565c6bbe-29e9-4512-8ba4-9acc0af21d13",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T18:54:08.6524341",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "earningTemplate": {
                            "payTemplateEarningID": "1527cf6c-93db-41bf-aba2-9d6af1d3c499",
                            "ratePerUnit": 25,
                            "numberOfUnits": 4,
                            "fixedAmount": null,
                            "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                            "name": "Ordinary Time"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarningsTemplate'
            example: '{
                        "ratePerUnit": 25,
                        "numberOfUnits": 4,
                        "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5"
                      }'
    delete:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: deleteEmployeeEarningsTemplate
      summary: deletes an employee earnings template record
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - name: PayTemplateEarningID
          in: path
          required: true
          description:  Id for single pay template earnings object
          schema: 
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: deletion successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarningsTemplateObject'
              example: '{
                          "id": "4f80827f-80b4-4899-918e-6eac4a85c222",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T18:54:09.1368544",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null
                        }'
  /Employees/{EmployeeId}/paytemplateearnings:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createMultipleEmployeeEarningsTemplate
      x-hasPayrollUkProblem: true
      summary: creates multiple employee earnings template records
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeePayTemplates'
              example: '{
                          "id": "cef00cf4-2bf6-4ef0-a293-dc12dc4d9e8c",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T15:01:52.9369043",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "earningTemplates": [
                            {
                              "payTemplateEarningID": "1527cf6c-93db-41bf-aba2-9d6af1d3c499",
                              "ratePerUnit": 20,
                              "numberOfUnits": 8,
                              "fixedAmount": null,
                              "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                              "name": "Ordinary Time"
                            },
                            {
                              "payTemplateEarningID": "92e757cc-b026-404d-804e-9dc2047a03e6",
                              "ratePerUnit": 0,
                              "numberOfUnits": 8,
                              "fixedAmount": null,
                              "earningsRateID": "65b83d94-f20f-45e1-85ae-387fcf460c26",
                              "name": "Salary"
                            }
                          ]
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarningsTemplates'
            example: '[{"ratePerUnit":20.0,"numberOfUnits":8.0,"earningsRateID":"f9d8f5b5-9049-47f4-8541-35e200f750a5"},{"ratePerUnit":0.0,"numberOfUnits":8.0,"earningsRateID":"65b83d94-f20f-45e1-85ae-387fcf460c26"}]'
  /Deductions:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getDeductions
      x-hasPayrollUkProblem: true
      summary: searches deductions
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deductions'
              example: '{
                          "id": "56c69b4d-e25d-4215-8a53-2aea72ef4b88",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T20:43:53.931198",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 1,
                            "itemCount": 4
                          },
                          "problem": null,
                          "deductions": [
                            {
                              "deductionId": "a3760fe4-68a4-4e38-8326-fe616af7dc74",
                              "deductionName": "KiwiSaver Voluntary Contributions",
                              "deductionCategory": "KiwiSaverVoluntaryContributions",
                              "liabilityAccountId": "26c57f04-0436-40cc-9cd9-1a21185d88bb",
                              "currentRecord": true,
                              "standardAmount": null
                            },
                            {
                              "deductionId": "a131596e-2f83-4f6c-9573-99c4cbfcefd1",
                              "deductionName": "Rent",
                              "deductionCategory": "NzOther",
                              "liabilityAccountId": "26c57f04-0436-40cc-9cd9-1a21185d88bb",
                              "currentRecord": true,
                              "standardAmount": 200
                            }
                          ]
                        }'
    post:
      security:
        - OAuth2: [payroll.settings]
      tags:
        - PayrollNz
      operationId: createDeduction
      x-hasPayrollUkProblem: true
      summary: create a new deduction
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeductionObject'
              example: '{
                          "id": "3c8fcfd4-642d-48ba-a1e4-727317b9658d",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T20:43:54.9563295",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "deduction": {
                            "deductionId": "0ee805eb-f5b0-4061-9b35-d9ea550da04e",
                            "deductionName": "My new deducation",
                            "deductionCategory": "NzOther",
                            "liabilityAccountId": "568f2e9a-0870-46cc-8678-f83f132ed4e3",
                            "currentRecord": true,
                            "standardAmount": null
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deduction'
            example: '{
                        "deductionName": "My new deducation",
                        "deductionCategory": "NzOther",
                        "liabilityAccountId": "568f2e9a-0870-46cc-8678-f83f132ed4e3"
                      }'
  /Deductions/{deductionId}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getDeduction
      x-hasPayrollUkProblem: true
      summary: retrieve a single deduction by id
      parameters:
        - in: path
          name: deductionId
          required: true
          description: Identifier for the deduction
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeductionObject'
              example: '{
                          "id": "8225eb1c-3dd8-4c5c-ba8e-db87e95012c8",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T20:43:54.846821",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "deduction": {
                            "deductionId": "a3760fe4-68a4-4e38-8326-fe616af7dc74",
                            "deductionName": "KiwiSaver Voluntary Contributions",
                            "deductionCategory": "KiwiSaverVoluntaryContributions",
                            "liabilityAccountId": "26c57f04-0436-40cc-9cd9-1a21185d88bb",
                            "currentRecord": true,
                            "standardAmount": null
                          }
                        }'
  /StatutoryDeductions:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNZ
      operationId: getStatutoryDeductions
      summary: searches statutory deductions
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatutoryDeductions'
  /StatutoryDeductions/{Id}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getStatutoryDeduction
      summary: retrieve a single statutory deduction by id
      parameters:
        - in: path
          name: Id
          required: true
          description: Identifier for the statutory deduction
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatutoryDeductionObject'
  /EarningsRates:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getEarningsRates
      x-hasPayrollUkProblem: true
      summary: searches earnings rates
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarningsRates'
              example: ''
    post:
      security:
        - OAuth2: [payroll.settings]
      tags:
        - PayrollNz
      operationId: createEarningsRate
      x-hasPayrollUkProblem: true
      summary: create a new earnings rate
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarningsRateObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarningsRate'
            example: ''
  /EarningsRates/{EarningsRateID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getEarningsRate
      x-hasPayrollUkProblem: true
      summary: retrieve a single earnings rates by id
      parameters:
        - in: path
          name: EarningsRateID
          required: true
          description: Identifier for the earnings rate
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarningsRateObject'
              example: ''
  /LeaveTypes:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getLeaveTypes
      x-hasPayrollUkProblem: true
      summary: searches leave types
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
        - in: query
          name: ActiveOnly
          description: Filters leave types by active status. By default the API returns all leave types.
          schema:
            type: boolean
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveTypes'
              example: '{
                          "id": "e1d38a1e-2595-40af-8a6e-6df5c8636c2c",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T20:49:58.4095603",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 1,
                            "itemCount": 15
                          },
                          "problem": null,
                          "leaveTypes": [
                            {
                              "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4",
                              "name": "Annual Leave",
                              "isPaidLeave": true,
                              "showOnPayslip": true,
                              "updatedDateUTC": "2019-09-22T23:09:32",
                              "isActive": true
                            },
                            {
                              "leaveTypeID": "71b548db-6e40-4b64-be8b-f6a71455d8ab",
                              "name": "Annual Leave - Cash Up",
                              "isPaidLeave": true,
                              "showOnPayslip": true,
                              "updatedDateUTC": "2019-09-22T23:09:32",
                              "isActive": true
                            }
                          ]
                        }'
    post:
      security:
        - OAuth2: [payroll.settings]
      tags:
        - PayrollNz
      operationId: createLeaveType
      x-hasPayrollUkProblem: true
      summary: create a new leave type
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveTypeObject'
              example: '{
                          "id": "64aae3cf-528d-448c-879c-e48b06911477",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T20:49:59.9135451",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leaveType": {
                            "leaveTypeID": "80464f55-b5c9-4d05-84c7-219d98baa3e2",
                            "name": "My wqwhhiktun Leave",
                            "isPaidLeave": false,
                            "showOnPayslip": true,
                            "updatedDateUTC": "2020-08-27T20:49:59.8315619",
                            "isActive": true
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveType'
            example: '{
                        "name": "My wqwhhiktun Leave",
                        "isPaidLeave": false,
                        "showOnPayslip": true
                      }'
  /LeaveTypes/{LeaveTypeID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getLeaveType
      x-hasPayrollUkProblem: true
      summary: retrieve a single leave type by id
      parameters:
        - in: path
          name: LeaveTypeID
          required: true
          description: Identifier for the leave type
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveTypeObject'
              example: '{
                          "id": "f9e8b606-8899-4467-af16-04430b745939",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T20:49:58.7293665",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "leaveType": {
                            "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4",
                            "name": "Annual Leave",
                            "isPaidLeave": true,
                            "showOnPayslip": true,
                            "updatedDateUTC": "2019-09-22T23:09:32",
                            "isActive": true
                          }
                        }'
  /Reimbursements:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getReimbursements
      x-hasPayrollUkProblem: true
      summary: searches reimbursements
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reimbursements'
              example: '{
                          "id": "042d7df0-0e87-4213-820f-64fd9ab87e7a",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T21:59:44.5592312",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 1,
                            "itemCount": 3
                          },
                          "problem": null,
                          "reimbursements": [
                            {
                              "reimbursementID": "ddf9b572-5861-4f97-a109-9d612df52242",
                              "name": "Mileage",
                              "accountID": "36d33c5d-7dea-4911-9ed0-7fccc16f2b5f",
                              "currentRecord": true,
                              "standardAmount": null,
                              "standardTypeOfUnits": "km",
                              "standardRatePerUnit": 0.79,
                              "reimbursementCategory": "NoGST",
                              "calculationType": "RatePerUnit"
                            }
                          ]
                        }'
    post:
      security:
        - OAuth2: [payroll.settings]
      tags:
        - PayrollNz
      operationId: createReimbursement
      x-hasPayrollUkProblem: true
      summary: create a new reimbursement
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReimbursementObject'
              example: '{
                          "id": "4d09a332-3e4e-4f9d-a00f-dc9a54cd632f",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T23:25:30.5238274",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "reimbursement": {
                            "reimbursementID": "c7a8e7fd-b4f1-4f7b-9256-1b3edaa72de7",
                            "name": "My new Reimburse",
                            "accountID": "fa5cdc43-643b-4ad8-b4ac-3ffe0d0f4488",
                            "currentRecord": true,
                            "standardAmount": null,
                            "standardTypeOfUnits": null,
                            "standardRatePerUnit": null,
                            "reimbursementCategory": "GSTInclusive",
                            "calculationType": "FixedAmount"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reimbursement'
            example: '{
                        "name": "My new Reimburse",
                        "accountID": "fa5cdc43-643b-4ad8-b4ac-3ffe0d0f4488",
                        "reimbursementCategory": "GSTInclusive",
                        "calculationType": "FixedAmount"
                      }'
  /Reimbursements/{ReimbursementID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getReimbursement
      x-hasPayrollUkProblem: true
      summary: retrieve a single reimbursement by id
      parameters:
        - in: path
          name: ReimbursementID
          required: true
          description: Identifier for the reimbursement
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReimbursementObject'
              example: '{
                          "id": "dba0ee55-764a-41bc-a1ed-cf7c88ab4164",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T21:59:46.5643076",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "reimbursement": {
                            "reimbursementID": "0d4e5476-1147-4a2c-9db4-ab6a15f81f1d",
                            "name": "GST",
                            "accountID": null,
                            "currentRecord": true,
                            "standardAmount": null,
                            "standardTypeOfUnits": null,
                            "standardRatePerUnit": null,
                            "reimbursementCategory": "GST",
                            "calculationType": null
                          }
                        }'
  /Timesheets:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.timesheets.read, payroll.timesheets]
      tags:
        - PayrollNz
      operationId: getTimesheets
      x-hasPayrollUkProblem: true
      summary: searches timesheets
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
        - in: query
          name: employeeId
          description: By default get Timesheets will return the timesheets for all employees in an organization. You can add GET https://…/timesheets?filter=employeeId=={EmployeeId} to get only the timesheets of a particular employee.
          schema:
            type: string
            format: uuid
        - in: query
          name: payrollCalendarId
          description: By default get Timesheets will return all the timesheets for an organization. You can add GET https://…/timesheets?filter=payrollCalendarId=={PayrollCalendarID} to filter the timesheets by payroll calendar id
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timesheets'
              example: ''
    post:
      security:
        - OAuth2: [payroll.timesheets]
      tags:
        - PayrollNz
      operationId: createTimesheet
      x-hasPayrollUkProblem: true
      summary: create a new timesheet
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timesheet'
            example: ''
  /Timesheets/{TimesheetID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.timesheets.read, timesheets.settings]
      tags:
        - PayrollNz
      operationId: getTimesheet
      x-hasPayrollUkProblem: true
      summary: retrieve a single timesheet by id
      parameters:
        - in: path
          name: TimesheetID
          required: true
          description: Identifier for the timesheet
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetObject'
              example: ''
    delete:
      security:
        - OAuth2: [payroll.timesheets]
      tags:
        - PayrollNz
      operationId: deleteTimesheet
      summary: delete a timesheet
      parameters:
        - in: path
          name: TimesheetID
          required: true
          description: Identifier for the timesheet
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetLine'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Timesheets/{TimesheetID}/Lines:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
        - OAuth2: [payroll.timesheets]
      tags:
        - PayrollNz
      operationId: createTimesheetLine
      x-hasPayrollUkProblem: true
      summary: create a new timesheet line
      parameters:
        - in: path
          name: TimesheetID
          required: true
          description: Identifier for the timesheet
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetLineObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetLine'
            example: ''
  /Timesheets/{TimesheetID}/Approve:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
        - OAuth2: [payroll.timesheets]
      tags:
        - PayrollNz
      operationId: approveTimesheet
      x-hasPayrollUkProblem: true
      summary: approve a timesheet
      parameters:
        - in: path
          name: TimesheetID
          required: true
          description: Identifier for the timesheet
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Timesheets/{TimesheetID}/RevertToDraft:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
        - OAuth2: [payroll.timesheets]
      tags:
        - PayrollNz
      operationId: revertTimesheet
      x-hasPayrollUkProblem: true
      summary: revert a timesheet to draft
      parameters:
        - in: path
          name: TimesheetID
          required: true
          description: Identifier for the timesheet
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Timesheets/{TimesheetID}/Lines/{TimesheetLineID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    put:
      security:
        - OAuth2: [payroll.timesheets]
      tags:
        - PayrollNz
      operationId: updateTimesheetLine
      x-hasPayrollUkProblem: true
      summary: update a timesheet line
      parameters:
        - in: path
          name: TimesheetID
          required: true
          description: Identifier for the timesheet
          schema:
            type: string
            format: uuid
        - in: path
          name: TimesheetLineID
          required: true
          description: Identifier for the timesheet line
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetLineObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimesheetLine'
            example: ''
    delete:
      security:
        - OAuth2: [payroll.timesheets]
      tags:
        - PayrollNz
      operationId: deleteTimesheetLine
      summary: delete a timesheet line
      parameters:
        - in: path
          name: TimesheetID
          required: true
          description: Identifier for the timesheet
          schema:
            type: string
            format: uuid
        - in: path
          name: TimesheetLineID
          required: true
          description: Identifier for the timesheet line
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetLine'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /PayRunCalendars:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getPayRunCalendars
      x-hasPayrollUkProblem: true
      summary: searches payrun calendars
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayRunCalendars'
              example: '{
                          "id": "5723854c-a68e-4b4c-bc68-508b1ce53567",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T23:54:48.3357097",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 1,
                            "itemCount": 2
                          },
                          "problem": null,
                          "payRunCalendars": [
                            {
                              "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                              "name": "Weekly",
                              "calendarType": "Weekly",
                              "periodStartDate": "2019-07-08T00:00:00",
                              "periodEndDate": "2019-07-14T00:00:00",
                              "paymentDate": "2019-07-16T00:00:00",
                              "updatedDateUTC": "2019-09-24T05:08:45"
                            },
                            {
                              "payrollCalendarID": "f6931b89-d9c8-4f25-b4fa-268b5fd24197",
                              "name": "Monthly",
                              "calendarType": "Monthly",
                              "periodStartDate": "2019-08-01T00:00:00",
                              "periodEndDate": "2019-08-31T00:00:00",
                              "paymentDate": "2019-08-23T00:00:00",
                              "updatedDateUTC": "2019-09-24T03:11:16"
                            }
                          ]
                        }'
    post:
      security:
        - OAuth2: [payroll.settings]
      tags:
        - PayrollNz
      operationId: createPayRunCalendar
      x-hasPayrollUkProblem: true
      summary: create a new payrun calendar
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayRunCalendarObject'
              example: '{
                          "id": "0c3bef01-2190-4789-9920-6edad91319a9",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T23:54:49.3159839",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "payRunCalendar": {
                            "payrollCalendarID": "54e9706a-c4e8-45ff-9c63-6fcac7ee7cde",
                            "name": "My Weekly Cal",
                            "calendarType": "Weekly",
                            "periodStartDate": "2020-05-01T00:00:00",
                            "periodEndDate": "2020-05-07T00:00:00",
                            "paymentDate": "2020-05-15T00:00:00",
                            "updatedDateUTC": "2020-08-26T23:54:49.4863322"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayRunCalendar'
            example: '{
                        "name": "My Weekly Cal",
                        "calendarType": "Weekly",
                        "periodStartDate": "2020-05-01",
                        "paymentDate": "2020-05-15"
                      }'
  /PayRunCalendars/{PayRunCalendarID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getPayRunCalendar
      x-hasPayrollUkProblem: true
      summary: retrieve a single payrun calendar by id
      parameters:
        - in: path
          name: PayRunCalendarID
          required: true
          description: Identifier for the payrun calendars
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayRunCalendarObject'
              example: '{
                          "id": "3188a2d6-d078-4e06-966a-8043ff9b852d",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-26T23:54:48.4398063",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "payRunCalendar": {
                            "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030",
                            "name": "Weekly",
                            "calendarType": "Weekly",
                            "periodStartDate": "2019-07-08T00:00:00",
                            "periodEndDate": "2019-07-14T00:00:00",
                            "paymentDate": "2019-07-16T00:00:00",
                            "updatedDateUTC": "2019-09-24T05:08:45"
                          }
                        }'
  /PayRunCalendars/{PayrollCalendarID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, payroll.settings]
      tags:
        - PayrollNz
      operationId: getPayRunCalendarByPayrollCalendarId
      x-hasPayrollUkProblem: true
      summary: retrieve a single payrun calendar by payroll calendar id
      parameters:
        - in: path
          name: PayrollCalendarID
          required: true
          description: Identifier for the payroll calendars
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayRunCalendarObject'
              example: ''
  /Employees/{EmployeeId}/SalaryAndWages:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get: 
      security:
        - OAuth2: [payroll.employees.read, payroll.employees]
      tags:
        - PayrollNz
      operationId: getEmployeeSalaryAndWages
      x-hasPayrollUkProblem: true
      summary: retrieves an employee's salary and wages
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryAndWages'
              example: '{
                          "id": "cddf04cb-0f43-464a-91fb-9dc94b6bd3b7",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T00:25:03.6697493",
                          "httpStatusCode": "OK",
                          "pagination": {
                            "page": 1,
                            "pageSize": 100,
                            "pageCount": 1,
                            "itemCount": 2
                          },
                          "problem": null,
                          "salaryAndWages": [
                            {
                              "salaryAndWagesID": "b0026f5a-fa8e-43aa-95e4-cec3c0972e39",
                              "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                              "numberOfUnitsPerWeek": 0,
                              "ratePerUnit": 25,
                              "numberOfUnitsPerDay": 0,
                              "daysPerWeek": 0,
                              "effectiveFrom": "2019-02-07T00:00:00",
                              "annualSalary": 25,
                              "status": "Active",
                              "paymentType": "Hourly"
                            },
                            {
                              "salaryAndWagesID": "0211c70c-93d5-4da1-a570-b66d8df2ca15",
                              "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                              "numberOfUnitsPerWeek": 2,
                              "ratePerUnit": null,
                              "numberOfUnitsPerDay": 2,
                              "daysPerWeek": 1,
                              "effectiveFrom": "2020-05-01T00:00:00",
                              "annualSalary": 100,
                              "status": "Active",
                              "paymentType": "Salary"
                            }
                          ]
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: createEmployeeSalaryAndWage
      x-hasPayrollUkProblem: true
      summary: creates employee salary and wage record
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryAndWageObject'
              example: '{
                          "id": "0e1f635e-479a-4403-a1ec-f86ffa248a62",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T00:22:47.464262",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "salaryAndWages": {
                            "salaryAndWagesID": "0211c70c-93d5-4da1-a570-b66d8df2ca15",
                            "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                            "numberOfUnitsPerWeek": 2,
                            "ratePerUnit": null,
                            "numberOfUnitsPerDay": 2,
                            "daysPerWeek": 1,
                            "effectiveFrom": "2020-05-01T00:00:00",
                            "annualSalary": 100,
                            "status": "Active",
                            "paymentType": "Salary"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalaryAndWage'
            example: '{
                        "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                        "numberOfUnitsPerWeek": 2,
                        "ratePerUnit": 10,
                        "numberOfUnitsPerDay": 2,
                        "daysPerWeek": 1,
                        "effectiveFrom": "2020-05-01",
                        "annualSalary": 100,
                        "status": "Active",
                        "paymentType": "Salary"
                      }'
  /Employees/{EmployeeId}/SalaryAndWages/{SalaryAndWagesID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.employees, payroll.employees.read]
      tags:
        - PayrollNz
      operationId: getEmployeeSalaryAndWage
      x-hasPayrollUkProblem: true
      summary: get employee salary and wages record by id
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - name: SalaryAndWagesID
          in: path
          required: true
          description:  Id for single pay template earnings object
          schema: 
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryAndWages'
              example: '{
                          "id": "5b709700-3185-4822-a1d0-40d0297a9391",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T00:25:03.8641784",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "salaryAndWages": [
                            {
                              "salaryAndWagesID": "b0026f5a-fa8e-43aa-95e4-cec3c0972e39",
                              "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                              "numberOfUnitsPerWeek": 0,
                              "ratePerUnit": 25,
                              "numberOfUnitsPerDay": 0,
                              "daysPerWeek": 0,
                              "effectiveFrom": "2019-02-07T00:00:00",
                              "annualSalary": 25,
                              "status": "Active",
                              "paymentType": "Hourly"
                            }
                          ]
                        }'
    put:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: updateEmployeeSalaryAndWage
      x-hasPayrollUkProblem: true
      summary: updates employee salary and wages record
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - name: SalaryAndWagesID
          in: path
          required: true
          description:  Id for single pay template earnings object
          schema: 
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryAndWageObject'
              example: '{
                          "id": "150ff877-fbd0-448b-b241-eabbc0e5a2bf",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-08-27T00:25:11.4976642",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "salaryAndWages": {
                            "salaryAndWagesID": "1912d614-99d0-43e6-8d63-5b539dcfe358",
                            "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                            "numberOfUnitsPerWeek": 3,
                            "ratePerUnit": null,
                            "numberOfUnitsPerDay": 3,
                            "daysPerWeek": 1,
                            "effectiveFrom": "2020-05-15T00:00:00",
                            "annualSalary": 101,
                            "status": "Active",
                            "paymentType": "Salary"
                          }
                        }'
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SalaryAndWage'
            example: '{
                        "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5",
                        "numberOfUnitsPerWeek": 3,
                        "ratePerUnit": 11,
                        "numberOfUnitsPerDay": 3,
                        "daysPerWeek": 1,
                        "effectiveFrom": "2020-05-15",
                        "annualSalary": 101,
                        "status": "Active",
                        "paymentType": "Salary"
                      }'
    delete:
      security:
        - OAuth2: [payroll.employees]
      tags:
        - PayrollNz
      operationId: deleteEmployeeSalaryAndWage
      summary: deletes an employee salary and wages record
      parameters:
        - name: EmployeeId
          in: path
          required: true
          description: Employee id for single object
          schema: 
            type: string
            format: uuid
            example: 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
        - name: SalaryAndWagesID
          in: path
          required: true
          description:  Id for single salary and wages object
          schema: 
            type: string
            format: uuid
            example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        '200':
          description: deletion successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryAndWageObject'
              example: '{
                      "id": "d75498f3-8d33-49a4-a2a5-22e8340181db",
                      "providerName": "java-sdk-oauth2-dev-02",
                      "dateTimeUTC": "2020-08-27T00:25:11.5391097",
                      "httpStatusCode": "OK",
                      "pagination": null,
                      "problem": null
                    }'
  /PayRuns:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.payruns.read, payroll.payruns]
      tags:
        - PayrollNz
      operationId: getPayRuns
      x-hasPayrollUkProblem: true
      summary: searches pay runs
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
        - in: query
          name: status
          description: By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu={PayRunStatus} to filter the payruns by status.
          schema:
            type: string
            enum:
              - Draft
              - Posted
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayRuns'
              example: ''
  /PayRuns/{PayRunID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.payruns.read, payroll.payruns]
      tags:
        - PayrollNz
      operationId: getPayRun
      x-hasPayrollUkProblem: true
      summary: retrieve a single pay run by id
      parameters:
        - in: path
          name: PayRunID
          required: true
          description: Identifier for the pay run
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayRunObject'
              example: ''
    put:
      security:
        - OAuth2: [payroll.payruns]
      tags:
        - PayrollNz
      operationId: updatePayRun
      x-hasPayrollUkProblem: true
      summary: update a pay run
      parameters:
        - in: path
          name: PayRunID
          required: true
          description: Identifier for the pay run
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayRunObject'
              example: ''
        '400':
          description: validation error for a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayRun'
            example: ''
  /Payslips:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.payslip.read, payroll.payslip]
      tags:
        - PayrollNz
      operationId: getPayslips
      x-hasPayrollUkProblem: true
      summary: searches payslips
      parameters:
        - in: query
          name: page
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
          schema:
            type: integer
        - in: query
          required: true
          name: PayRunID
          description: PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payslips'
              example: ''
  /Payslips/{PayslipID}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.payslip.read, payroll.payslip]
      tags:
        - PayrollNz
      operationId: getPaySlip
      x-hasPayrollUkProblem: true
      summary: retrieve a single payslip by id
      parameters:
        - in: path
          name: PayslipID
          required: true
          description: Identifier for the payslip
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayslipObject'
              example: ''
  /Settings:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, settings.payslip]
      tags:
        - PayrollNz
      operationId: getSettings
      x-hasPayrollUkProblem: true
      summary: searches settings
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
              example: ''
  /settings/trackingCategories:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [payroll.settings.read, settings.payslip]
      tags:
        - PayrollNz
      operationId: getTrackingCategories
      x-hasPayrollUkProblem: true
      summary: searches tracking categories
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingCategories'
              example: '{
                          "id": "e56628f7-a25e-4d23-88c5-56e2895e2143",
                          "providerName": "java-sdk-oauth2-dev-02",
                          "dateTimeUTC": "2020-04-10T21:13:21.498344",
                          "httpStatusCode": "OK",
                          "pagination": null,
                          "problem": null,
                          "trackingCategories": {
                            "employeeGroupsTrackingCategoryID": "9d8ad8f6-0d0f-41e0-8851-ef47e8b54ae6",
                            "timesheetTrackingCategoryID": "1d7d2015-10e7-4ecb-8b44-f331c8b63e2d"
                          }
                        }'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: For more information visit https://developer.xero.com/documentation/oauth2/overview
      flows: 
        authorizationCode:
          authorizationUrl: 'https://login.xero.com/identity/connect/authorize'
          tokenUrl: 'https://identity.xero.com/connect/token'
          scopes:
            payroll.employees: Grant read-write access to payroll employees
            payroll.employees.read: Grant read-only access to payroll employees
            payroll.payruns: Grant read-write access to payroll payruns
            payroll.payruns.read: Grant read-only access to payroll payruns
            payroll.payslip: Grant read-write access to payroll payslips
            payroll.payslip.read: Grant read-only access to payroll payslips
            payroll.settings: Grant read-write access to payroll settings
            payroll.settings.read: Grant read-only access to payroll settings
            payroll.timesheets: Grant read-write access to payroll timesheets
            payroll.timesheets.read: Grant read-only access to payroll timesheets
  parameters:
    requiredHeader: 
      in: header
      name: Xero-Tenant-Id
      description: Xero identifier for Tenant
      schema:
        type: string
      required: true 
  schemas:
    Pagination:
      properties:
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 10
        pageCount:
          type: integer
          example: 1
        itemCount:
          type: integer
          example: 2
    Problem:
      description: The object returned for a bad request
      type: object
      properties:
        type: 
          description: The type of error format 
          type: string
          example: application/problem+json
        title:
          description: The type of the error
          type: string
          example: BadRequest
        status:
          description: The error status code 
          type: string
          example: 400
        detail:
          description: A description of the error
          type: string
          example: Validation error occurred.
        instance: 
          type: string
        invalidFields:
          type: array
          items:
            $ref: '#/components/schemas/InvalidField'
    InvalidField:
      type: object
      properties:
        name:
          description: The name of the field that caused the error
          type: string
          example: DateOfBirth
        reason:
          description: The reason the error occurred
          type: string
          example: The Date of Birth is required.  
    Employees:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        employees:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    EmployeeObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        employee:
          $ref: '#/components/schemas/Employee'
        problem:
          $ref: '#/components/schemas/Problem'
    Employee:
      type: object
      required:
        - FirstName
        - LastName
        - DateOfBirth
        - Address
      properties:
        employeeID:
          description:  Xero unique identifier for the employee
          type: string
          format: uuid
          example: d90457c4-f1be-4f2e-b4e3-f766390a7e30
        title:
          description: Title of the employee
          type: string
          example: Mrs
        firstName:
          description: First name of employee
          type: string
          example: Karen
        lastName:
          description: Last name of employee
          type: string
          example: Jones
        dateOfBirth:
          description: Date of birth of the employee (YYYY-MM-DD)
          type: string
          format: date
          example: 2019-01-02  
          x-is-date: true 
        address:
          $ref: '#/components/schemas/Address'
        email:
          description: The email address for the employee
          type: string
          example: developer@me.com
        gender:
          description: The employee’s gender
          type: string
          enum:
          - M  
          - F 
          example: F
        phoneNumber:
          description: Employee phone number
          type: string
          example: 415-555-1212
        startDate:
          description: Employment start date of the employee at the time it was requested
          type: string
          format: date
          example: 2020-01-19
          x-is-date: true
        endDate:
          description: Employment end date of the employee at the time it was requested
          type: string
          format: date
          example: 2020-01-19
          x-is-date: true
        payrollCalendarID:
          description: Xero unique identifier for the payroll calendar of the employee
          type: string
          format: uuid
        updatedDateUTC:
          description: UTC timestamp of last update to the employee
          type: string
          format: date-time
          x-is-datetime: true
        createdDateUTC:
          description: UTC timestamp when the employee was created in Xero
          type: string
          format: date-time
          x-is-datetime: true
    EmploymentObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        employment:
          $ref: '#/components/schemas/Employment'
    Employment:
      type: object
      required:
        - PayrollCalendarID
        - StartDate
      properties:
        payrollCalendarID:
          description: Xero unique identifier for the payroll calendar of the employee
          type: string
          format: uuid
        payRunCalendarID:
          description: Xero unique identifier for the payrun calendar for the employee (Deprecated in version 1.1.6)
          type: string
          format: uuid
        startDate:
          description: Start date of the employment (YYYY-MM-DD)
          type: string
          format: date
          x-is-date: true 
    EmployeeTaxObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        employeeTax:
          $ref: '#/components/schemas/EmployeeTax'
    EmployeeTax:
      type: object
      properties:
        irdNumber:
          description: The IRD Number.
          type: string
          example: 111111111
        taxCode:
          $ref: '#/components/schemas/TaxCode'
        specialTaxRatePercentage:
          description: Special tax rate percentage.
          type: number
          format: double
          example: 17.5
        hasSpecialStudentLoanRate:
          description: Does the employee has a special student loan rate?
          type: boolean
          example: true        
        specialStudentLoanRatePercentage:
          description: The employee student loan rate percentage.
          type: number
          format: double
          example: 2.0
        isEligibleForKiwiSaver:
          description: The employee eligibility for KiwiSaver.
          type: boolean
          example: true       
        esctRatePercentage:
          description: Employer superannuation contribution tax rate.
          type: number
          format: double
          example: 1.0
        kiwiSaverContributions:
          description: Contribution Option which can be 'MakeContributions' 'OptOut', 'OnAContributionsHoliday', 'OnASavingsSuspension', 'NotCurrentlyAKiwiSaverMember' for employees without a KiwiSaver membership
          type: string
          example: MakeContributions
          enum:
          - MakeContributions
          - OptOut
          - OnAContributionsHoliday
          - OnASavingsSuspension
          - NotCurrentlyAKiwiSaverMember
        kiwiSaverEmployeeContributionRatePercentage:
          description: Employee Contribution percentage.
          type: number
          format: double
          example: 4.0
        kiwiSaverEmployerContributionRatePercentage:
          description: Employer Contribution percentage.
          type: number
          format: double
          example: 10.0       
        kiwiSaverEmployerSalarySacrificeContributionRatePercentage:
          description: Employer Contribution through Salary Sacrifice percentage.
          type: number
          format: double
          example: 2.0
        kiwiSaverOptOutDate:
          description: Opt Out Date.
          type: string
          format: date
          x-is-date: true 
          example: "2020-06-01T00:00:00"        
        kiwiSaverContributionHolidayEndDate:
          description: Contribution holiday expiry date or end date.
          type: string
          format: date
          x-is-date: true 
          example: "2019-06-01T00:00:00"
        hasStudentLoanBalance:
          description: Does the employee have a remaining student loan balance? Set a remaining balance if you have received a letter from IR.
          type: boolean
          example: false
        studentLoanBalance:
          description: The employee's student loan balance shown on the letter from IR.
          type: number
          format: double
          example: 30.0000
        studentLoanAsAt:
          description: The date of the letter from IR.
          type: string
          format: date
          x-is-date: true 
          example: "2020-07-01T00:00:00"
    TaxCode:
      description: Tax codes used for employee tax
      type: string
      enum:
      - ND
      - M
      - ME
      - MSL
      - MESL
      - SB
      - S
      - SH
      - ST
      - SBSL
      - SSL
      - SHSL
      - STSL
      - WT
      - CAE
      - EDW
      - NSW
      - STC
      - STCSL
    EmployeeOpeningBalancesObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        openingBalances:
          $ref: '#/components/schemas/EmployeeOpeningBalances'
    EmployeeOpeningBalances:
      type: object
      properties:
        periodEndDate:
          description: The opening balance period end date.
          type: string
          format: date
          x-is-date: true 
          example: "2020-07-01T00:00:00"
        daysPaid:
          description: The paid number of days.
          type: number
          format: integer
        unpaidWeeks:
          description: The number of unpaid weeks.
          type: number
          format: integer
        grossEarnings:
          description: The gross earnings during the period.
          type: number
          format: double
    EmployeeLeaves:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leave:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeLeave'
    EmployeeLeaveObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leave:
          $ref: '#/components/schemas/EmployeeLeave'
    EmployeeLeave:
      type: object
      required:
        - leaveTypeID
        - description
        - startDate
        - endDate
      properties:
        leaveID:
          description: The Xero identifier for LeaveType
          type: string
          format: uuid
        leaveTypeID:
          description: The Xero identifier for LeaveType
          type: string
          format: uuid
        description:
          description: The description of the leave  (max length = 50)
          type: string
        startDate:
          description: Start date of the leave (YYYY-MM-DD)  
          type: string
          format: date
          x-is-date: true 
        endDate:
          description:   End date of the leave (YYYY-MM-DD)
          type: string
          format: date
          x-is-date: true 
        periods:
          description: The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits.
          type: array
          items:
            $ref: '#/components/schemas/LeavePeriod'
        updatedDateUTC:
          description: UTC timestamp of last update to the leave type note
          type: string
          format: date-time
          x-is-datetime: true
    LeavePeriods:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        periods:
          type: array
          items:
            $ref: '#/components/schemas/LeavePeriod'
    LeavePeriod:
      type: object
      properties:
        periodStartDate:
          description: The Pay Period Start Date (YYYY-MM-DD)
          type: string
          format: date
          x-is-date: true 
        periodEndDate:
          description:   The Pay Period End Date (YYYY-MM-DD)
          type: string
          format: date
          x-is-date: true 
        numberOfUnits:
          description: The Number of Units for the leave
          type: number
          format: double
        periodStatus:
          description: Period Status
          type: string
          enum:
          - Approved
          - Completed
    EmployeeLeaveBalances:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leaveBalances:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeLeaveBalance'
    EmployeeLeaveBalance:
      type: object
      properties:
        name:
          description: Name of the leave type.  
          type: string
          example: Holiday
        leaveTypeID:
          description: The Xero identifier for leave type
          type: string
          format: uuid
        balance:
          description: The employees current balance for the corresponding leave type.
          type: number
          format: double
        typeOfUnits:
          description: The type of the units of the leave.
          type: string
          example: hours
    EmployeeStatutoryLeaveBalanceObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leaveBalance:
          $ref: '#/components/schemas/EmployeeStatutoryLeaveBalance'
    EmployeeStatutoryLeaveBalance:
      type: object
      properties:
        leaveType: 
          description: The type of statutory leave
          type: string
          enum:
          - Sick
          - Adoption
          - Maternity
          - Paternity
          - Sharedparental
        balanceRemaining:
          description: The balance remaining for the corresponding leave type as of specified date.
          type: number
          format: double
        units:
          description: The units will be "Hours"
          type: string
          enum:
          - Hours
    EmployeeStatutoryLeavesSummaries:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        statutoryLeaves:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeStatutoryLeaveSummary'
    EmployeeStatutoryLeaveSummary:
      type: object
      properties:
        statutoryLeaveID:
          description: The unique identifier (guid) of a statutory leave.  
          type: string
          format: uuid
        employeeID:
          description: The unique identifier (guid) of the employee  
          type: string
          format: uuid
        type:
          description: The category of statutory leave
          type: string
          enum:
            - Sick
            - Adoption
            - Maternity
            - Paternity
            - Sharedparental
        startDate:
          description: The date when the leave starts  
          type: string
          format: date
          x-is-date: true 
        endDate: 
          description: The date when the leave ends  
          type: string
          format: date
          x-is-date: true 
        isEntitled:
          description: Whether the leave was entitled to receive payment  
          type: boolean
        status:
          description: The status of the leave
          type: string
          enum:
            - Pending
            - In-Progress
            - Completed
    EmployeeStatutorySickLeaves:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        statutorySickLeave:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeStatutorySickLeave'
    EmployeeStatutorySickLeaveObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        statutorySickLeave:
          $ref: '#/components/schemas/EmployeeStatutorySickLeave'
    EmployeeStatutorySickLeave:
      type: object
      required:
        - employeeID
        - startDate
        - endDate
        - workPattern
        - leaveTypeID
        - isPregnancyRelated
        - sufficientNotice
      properties:
        statutoryLeaveID:
          description: The unique identifier (guid) of a statutory leave  
          type: string
          format: uuid
        employeeID:
          description: The unique identifier (guid) of the employee  
          type: string
          format: uuid
        leaveTypeID:
          description: The unique identifier (guid) of the "Statutory Sick Leave (non-pensionable)" pay item  
          type: string
          format: uuid
        startDate:
          description: The date when the leave starts  
          type: string
          format: date
          x-is-date: true 
        endDate:
          description: The date when the leave ends  
          type: string
          format: date
          x-is-date: true 
        type:
          description: the type of statutory leave
          type: string
          example: "Sick"
        status:
          description: the type of statutory leave
          type: string
          example: "Pending"
        workPattern:
          description: The days of the work week the employee is scheduled to work at the time the leave is taken  
          type: array
          items:
            type: string
        isPregnancyRelated:
          description: Whether the sick leave was pregnancy related  
          type: boolean
        sufficientNotice:
          description: Whether the employee provided sufficent notice and documentation as required by the employer supporting the sick leave request  
          type: boolean
        isEntitled:
          description: Whether the leave was entitled to receive payment  
          type: boolean
        entitlementWeeksRequested:
          description: The amount of requested time (in weeks)  
          type: number
          format: double
        entitlementWeeksQualified:
          description: The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested  
          type: number
          format: double
        entitlementWeeksRemaining:
          description: A calculated amount of time (in weeks) that remains for the statutory sick leave period  
          type: number
          format: double
        overlapsWithOtherLeave:
          description: Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave's period. While this is allowed it could affect payment amounts
          type: boolean
        entitlementFailureReasons:
          description: If the leave requested was considered "not entitled", the reasons why are listed here. 
          type: array
          items:
            type: string
            enum:
            - UnableToCalculateAwe
            - AweLowerThanLel
            - NotQualifiedInPreviousPiw
            - ExceededMaximumEntitlementWeeksOfSsp
            - ExceededMaximumDurationOfPiw
            - SufficientNoticeNotGiven
    EmployeeLeaveTypes:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leaveTypes:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeLeaveType'
    EmployeeLeaveSetupObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leaveSetup:
          $ref: '#/components/schemas/EmployeeLeaveSetup'
    EmployeeLeaveSetup:
      type: object
      properties:
        includeHolidayPay:
          description: Identifier if holiday pay will be included in each payslip
          type: boolean
          example: false
        holidayPayOpeningBalance:
          description: Initial holiday pay balance. A percentage — usually 8% — of gross earnings since their last work anniversary.
          type: number
          format: double
          example: 10.5
        annualLeaveOpeningBalance:
          description: Initial annual leave balance. The balance at their last anniversary, less any leave taken since then and excluding accrued annual leave.
          type: number
          format: double
          example: 25.89
        negativeAnnualLeaveBalancePaidAmount:
          description: The dollar value of annual leave opening balance if negative.
          type: number
          format: double
          example: 10.0
        sickLeaveHoursToAccrueAnnually:
          description: Number of hours accrued annually for sick leave. Multiply the number of days they're entitled to by the hours worked per day
          type: number
          format: double
          example: 100.5
        sickLeaveMaximumHoursToAccrue:
          description: Maximum number of hours accrued annually for sick leave. Multiply the maximum days they can accrue by the hours worked per day
          type: number
          format: double
          example: 200.5
        sickLeaveOpeningBalance:
          description: Initial sick leave balance. This will be positive unless they've taken sick leave in advance
          type: number
          format: double
          example: 10.5
    EmployeeLeaveTypeObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leaveType:
          $ref: '#/components/schemas/EmployeeLeaveType'
    EmployeeLeaveType:
      type: object
      properties:
        leaveTypeID:
          description: The Xero identifier for leave type
          type: string
          format: uuid
        scheduleOfAccrual:
          description: The schedule of accrual
          type: string
          enum:
            - AnnuallyAfter6Months
            - OnAnniversaryDate
            - PercentageOfGrossEarnings  
            - NoAccruals
        hoursAccruedAnnually:
          description: The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is "OnHourWorked"
          type: number
          format: double
        maximumToAccrue:
          description: The maximum number of hours that can be accrued for the leave  
          type: number
          format: double
        openingBalance:
          description: The initial number of hours assigned when the leave was added to the employee  
          type: number
          format: double
        rateAccruedHourly:
          description: The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is "OnHourWorked"
          type: number
          format: double
        percentageOfGrossEarnings:
          description: Specific for scheduleOfAccrual having percentage of gross earnings. Identifies how much percentage of gross earnings is accrued per pay period.
          type: number
          format: double
        includeHolidayPayEveryPay:
          description: Specific to Holiday pay. Flag determining if pay for leave type is added on each pay run.
          type: boolean
        showAnnualLeaveInAdvance:
          description: Specific to Annual Leave. Flag to include leave available to take in advance in the balance in the payslip
          type: boolean
        annualLeaveTotalAmountPaid:
          description: Specific to Annual Leave. Annual leave balance in dollars
          type: number
          format: double
    EmployeePayTemplateObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        payTemplate:
          $ref: '#/components/schemas/EmployeePayTemplate'
    EmployeePayTemplates:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        payTemplate:
          $ref: '#/components/schemas/EmployeePayTemplate'
    EmployeePayTemplate:
      type: object
      required:
        - EarningTemplates
      properties:
        employeeID:
          description: Unique identifier for the employee
          type: string
          format: uuid
        earningTemplates:
          $ref: '#/components/schemas/EarningsTemplates'
    EarningsTemplates:
      type: array
      items:
        $ref: '#/components/schemas/EarningsTemplate'
    EarningsTemplateObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        earningTemplate:
          $ref: '#/components/schemas/EarningsTemplate'
    EarningsTemplate:
      type: object
      properties:
        payTemplateEarningID:
          description: The Xero identifier for the earnings template
          type: string
          format: uuid
        ratePerUnit:
          description: The rate per unit  
          type: number
          format: double
        numberOfUnits:
          description: The rate per unit  
          type: number
          format: double
        fixedAmount:
          description: The fixed amount per period  
          type: number
          format: double
        earningsRateID:
          description: The corresponding earnings rate identifier  
          type: string
          format: uuid
        name:
          description: The read-only name of the Earning Template.
          type: string
    Benefits:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        benefits:
          type: array
          items:
            $ref: '#/components/schemas/Benefit'
    BenefitObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        benefit:
          $ref: '#/components/schemas/Benefit'
    Benefit:
      type: object
      required:
        - name
        - category
        - liabilityAccountId
        - expenseAccountId
        - calculationType
        - percentage
        - standardAmount
      properties:
        id:
          description: unique identifier in Xero
          type: string
          format: uuid
        name:
          description: Name of the employer pension
          type: string
        category:
          description: Category type of the employer pension
          type: string
          enum:
          - StakeholderPension
          - Other
        liabilityAccountId:
          description: Xero identifier for Liability Account
          type: string
          format: uuid
        expenseAccountId:
          description: Xero identifier for Expense Account
          type: string
          format: uuid
        standardAmount:
          description: Standard amount of the employer pension
          type: number
          format: double
        percentage:
          description: Percentage of gross of the employer pension
          type: number
          format: double
        calculationType:
          description: Calculation Type of the employer pension (FixedAmount or PercentageOfGross).
          type: string
          enum:
            - FixedAmount
            - PercentageOfGross
        currentRecord:
          description: Identifier of a record is active or not.
          type: boolean
        subjectToNIC:
          description: Identifier of subject To NIC
          type: boolean
        subjectToPension:
          description: Identifier of subject To pension
          type: boolean
        subjectToTax:
          description: Identifier of subject To Tax
          type: boolean
        isCalculatingOnQualifyingEarnings:
          description: Identifier of calculating on qualifying earnings
          type: boolean
        showBalanceToEmployee:
          description: display the balance to employee
          type: boolean
    Deductions:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        deductions:
          type: array
          items:
            $ref: '#/components/schemas/Deduction'
    DeductionObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        deduction:
          $ref: '#/components/schemas/Deduction'
    Deduction:
      type: object
      required:
        - deductionName
        - deductionCategory
        - liabilityAccountId
        - calculationType
      properties:
        deductionId:
          description: The Xero identifier for Deduction
          type: string
          format: uuid
        deductionName:
          description: Name of the deduction
          type: string
        deductionCategory:
          description: Deduction Category type
          type: string
          enum:
            - PayrollGiving
            - KiwiSaverVoluntaryContributions
            - Superannuation
            - NzOther
        liabilityAccountId:
          description: Xero identifier for Liability Account
          type: string
          format: uuid
        currentRecord:
          description: Identifier of a record is active or not.
          type: boolean
        standardAmount:
          description: Standard amount of the deduction
          type: number
          format: double
    StatutoryDeductions:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        statutoryDeductions:
          $ref: '#/components/schemas/StatutoryDeduction'
    StatutoryDeductionObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        statutoryDeduction:
          $ref: '#/components/schemas/StatutoryDeduction'
    StatutoryDeduction:
      type: object
      properties:
        id:
          description: The Xero identifier for earnings order
          type: string
          format: uuid
        name:
          description: Name of the earnings order
          type: string
        statutoryDeductionCategory:
          $ref: '#/components/schemas/StatutoryDeductionCategory'
        liabilityAccountId:
          description: Xero identifier for Liability Account
          type: string
          format: uuid
        currentRecord:
          description: Identifier of a record is active or not.
          type: boolean
    StatutoryDeductionCategory:
      description: Statutory Deduction Category
      type: string
      enum:
      - PriorityOrder
      - NonPriorityOrder
      - TableBased
      - ChildSupport
      - CourtFines
      - InlandRevenueArrears
      - MsdRepayments
      - StudentLoan
      - AdditionalStudentLoan
      - VoluntaryStudentLoan
      - KiwiSaver
    EarningsOrders:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        statutoryDeductions:
          type: array
          items:
            $ref: '#/components/schemas/EarningsOrder'
    EarningsOrderObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        statutoryDeduction:
          $ref: '#/components/schemas/EarningsOrder'
    EarningsOrder:
      type: object
      required:
        - name
      properties:
        id:
          description: Xero unique identifier for an earning rate
          type: string
          format: uuid
        name:
          description: Name of the earning order
          type: string
        statutoryDeductionCategory:
          $ref: '#/components/schemas/StatutoryDeductionCategory'
        liabilityAccountId:
          description: Xero identifier for Liability Account
          type: string
          format: uuid
        currentRecord:
          description: Identifier of a record is active or not.
          type: boolean
          default: true
    EarningsRates:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        earningsRates:
          type: array
          items:
            $ref: '#/components/schemas/EarningsRate'
    EarningsRateObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        earningsRate:
          $ref: '#/components/schemas/EarningsRate'
    EarningsRate:
      type: object
      required:
        - name
        - earningsType
        - rateType
        - typeOfUnits
        - expenseAccountID
      properties:
        earningsRateID:
          description: Xero unique identifier for an earning rate
          type: string
          format: uuid
        name:
          description: Name of the earning rate
          type: string
        earningsType:
          description: Indicates how an employee will be paid when taking this type of earning
          type: string
          enum:
            - OvertimeEarnings
            - Allowance
            - RegularEarnings
            - Commission
            - Bonus
            - Tips(Direct)
            - Tips(Non-Direct)
            - Backpay
            - OtherEarnings
            - LumpSum
        rateType:
          description: Indicates the type of the earning rate
          type: string
          enum:
            - RatePerUnit
            - MultipleOfOrdinaryEarningsRate
            - FixedAmount
        typeOfUnits:
          description: The type of units used to record earnings
          type: string
        currentRecord:
          description: Indicates whether an earning type is active
          type: boolean
        expenseAccountID:
          description: The account that will be used for the earnings rate
          type: string
          format: uuid
        ratePerUnit:
          description: Default rate per unit (optional). Only applicable if RateType is RatePerUnit
          type: number
          format: double
        multipleOfOrdinaryEarningsRate:
          description: This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate
          type: number
          format: double
        fixedAmount:
          description: Optional Fixed Rate Amount. Applicable for FixedAmount Rate
          type: number
          format: double
    LeaveTypes:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leaveTypes:
          type: array
          items:
            $ref: '#/components/schemas/LeaveType'
    LeaveTypeObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        leaveType:
          $ref: '#/components/schemas/LeaveType'
    LeaveType:
      type: object
      required:
        - name
        - isPaidLeave
        - showOnPayslip
      properties:
        leaveTypeID:
          description: Xero unique identifier for the leave type
          type: string
          format: uuid
        name:
          description: Name of the leave type
          type: string
        isPaidLeave:
          description: Indicate that an employee will be paid when taking this type of leave
          type: boolean
        showOnPayslip:
          description: Indicate that a balance for this leave type to be shown on the employee’s payslips
          type: boolean
        updatedDateUTC:
          description: UTC timestamp of last update to the leave type note
          type: string
          format: date-time
          x-is-datetime: true 
        isActive:
          description: Shows whether the leave type is active or not
          type: boolean
    Reimbursements:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        reimbursements:
          type: array
          items:
            $ref: '#/components/schemas/Reimbursement'
    ReimbursementObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        reimbursement:
          $ref: '#/components/schemas/Reimbursement'
    Reimbursement:
      type: object
      required:
        - name
        - accountID
      properties:
        reimbursementID:
          description: Xero unique identifier for a reimbursement
          type: string
          format: uuid
        name:
          description: Name of the reimbursement
          type: string
        accountID:
          description: Xero unique identifier for the account used for the reimbursement
          type: string
          format: uuid
        currentRecord:
          description: Indicates that whether the reimbursement is active
          type: boolean
        reimbursementCategory:
          description: See Reimbursement Categories
          type: string
          enum:
            - GST
            - NoGST
            - GSTInclusive
        calculationType:
          description: See Calculation Types
          type: string
          enum:
            - Unknown
            - FixedAmount
            - RatePerUnit
        standardAmount:
          description: Optional Fixed Rate Amount. Applicable when calculation type is Fixed Amount
          type: string
        standardTypeOfUnits:
          description: Optional Type Of Units. Applicable when calculation type is Rate Per Unit
          type: string
          enum: 
            - Hours
        standardRatePerUnits:
          description: Optional Rate Per Unit. Applicable when calculation type is Rate Per Unit
          type: string
    Timesheets:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        timesheets:
          type: array
          items:
            $ref: '#/components/schemas/Timesheet'
    TimesheetObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        timesheet:
          $ref: '#/components/schemas/Timesheet'
    Timesheet:
      type: object
      required:
        - payrollCalendarID
        - employeeID
        - startDate
        - endDate
      properties:
        timesheetID:
          description: The Xero identifier for a Timesheet
          type: string
          format: uuid 
        payrollCalendarID:
          description: The Xero identifier for the Payroll Calandar that the Timesheet applies to
          type: string
          format: uuid 
        employeeID:
          description: The Xero identifier for the Employee that the Timesheet is for
          type: string
          format: uuid 
        startDate:
          description: The Start Date of the Timesheet period (YYYY-MM-DD)
          type: string
          format: date 
          x-is-date: true 
        endDate:
          description: The End Date of the Timesheet period (YYYY-MM-DD)
          type: string
          format: date 
          x-is-date: true 
        status:
          description: Status of the timesheet
          type: string
          enum:
            - Draft
            - Approved
            - Completed
        totalHours:
          description: The Total Hours of the Timesheet
          type: number
          format: double 
        updatedDateUTC:
          description: The UTC date time that the Timesheet was last updated
          type: string
          format: date-time
          x-is-datetime: true
        timesheetLines:
          $ref: '#/components/schemas/TimesheetLines'
    TimesheetLines:
      type: array
      items:
        $ref: '#/components/schemas/TimesheetLine'
    TimesheetLineObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        timesheetLine:
          $ref: '#/components/schemas/TimesheetLine'
    TimesheetLine:
      type: object
      required:
        - date
        - earningsRateID
        - numberOfUnits
      properties:
        timesheetLineID:
          description: The Xero identifier for a Timesheet Line
          type: string
          format: uuid 
        date:
          description: The Date that this Timesheet Line is for (YYYY-MM-DD)
          type: string
          format: date 
          x-is-date: true 
        earningsRateID:
          description: The Xero identifier for the Earnings Rate that the Timesheet is for
          type: string
          format: uuid 
        trackingItemID:
          description: The Xero identifier for the Tracking Item that the Timesheet is for
          type: string
          format: uuid 
        numberOfUnits:
          description: The Number of Units of the Timesheet Line
          type: number
          format: double 
    PayRunCalendars:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        payRunCalendars:
          type: array
          items:
            $ref: '#/components/schemas/PayRunCalendar'
    PayRunCalendarObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        payRunCalendar:
          $ref: '#/components/schemas/PayRunCalendar'
    PayRunCalendar:
      type: object
      required:
        - name
        - calendarType
        - periodStartDate
        - paymentDate
      properties:
        payrollCalendarID:
          description: Xero unique identifier for the payroll calendar
          type: string
          format: uuid 
        name:
          description: Name of the calendar
          type: string
        calendarType:
          description: Type of the calendar
          type: string
          enum:
            - Weekly
            - Fortnightly
            - FourWeekly
            - Monthly
            - Annual
            - Quarterly
        periodStartDate:
          description: Period start date of the calendar
          type: string
          format: date
          x-is-date: true 
        periodEndDate:
          description: Period end date of the calendar
          type: string
          format: date
          x-is-date: true 
        paymentDate:
          description: Payment date of the calendar
          type: string
          format: date
          x-is-date: true 
        updatedDateUTC:
          description: UTC timestamp of the last update to the pay run calendar
          type: string
          format: date-time
          x-is-datetime: true 
    PaymentMethodObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
    PaymentMethod:
      type: object
      required:
        - paymentMethod
      properties:
        paymentMethod:
          description: The payment method code
          type: string
          enum:
            - Cheque
            - Electronically
            - Manual
        bankAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
    SalaryAndWages:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        salaryAndWages:
          type: array
          items:
            $ref: '#/components/schemas/SalaryAndWage'
    SalaryAndWageObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        salaryAndWages:
          $ref: '#/components/schemas/SalaryAndWage'
    SalaryAndWage:
      type: object
      required:
        - earningsRateID
        - numberOfUnitsPerWeek
        - ratePerUnit
        - numberOfUnitsPerDay
        - effectiveFrom
        - annualSalary
        - status
        - paymentType
      properties:
        salaryAndWagesID:
          description: Xero unique identifier for a salary and wages record
          type: string
          format: uuid 
        earningsRateID:
          description: Xero unique identifier for an earnings rate
          type: string
          format: uuid 
        numberOfUnitsPerWeek:
          description: The Number of Units per week for the corresponding salary and wages
          type: number
          format: double 
        ratePerUnit:
          description: The rate of each unit for the corresponding salary and wages
          type: number
          format: double 
        numberOfUnitsPerDay:
          description: The Number of Units per day for the corresponding salary and wages
          type: number
          format: double 
        daysPerWeek:
          description: The days per week for the salary.
          type: integer
          format: int32
        effectiveFrom:
          description: The effective date of the corresponding salary and wages
          type: string
          format: date 
          x-is-date: true 
        annualSalary:
          description: The annual salary
          type: number
          format: double 
        status:
          description: The current status of the corresponding salary and wages
          type: string
          enum:
            - Active
            - Pending
        paymentType:
          description: The type of the payment of the corresponding salary and wages
          type: string
          enum:
            - Salary
    PayRuns:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        payRuns:
          type: array
          items:
            $ref: '#/components/schemas/PayRun'
    PayRunObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        payRun:
          $ref: '#/components/schemas/PayRun'
    PayRun:
      type: object
      properties:
        payRunID:
          description: Xero unique identifier for the pay run
          type: string
          format: uuid 
        payrollCalendarID:
          description: Xero unique identifier for the payroll calendar
          type: string
          format: uuid 
        periodStartDate:
          description: Period start date of the payroll calendar
          type: string
          format: date 
          x-is-date: true
        periodEndDate:
          description: Period end date of the payroll calendar
          type: string
          format: date 
          x-is-date: true 
        paymentDate:
          description: Payment date of the pay run
          type: string
          format: date 
          x-is-date: true 
        totalCost:
          description: Total cost of the pay run
          type: number
          format: double 
        totalPay:
          description: Total pay of the pay run
          type: number
          format: double 
        payRunStatus:
          description: Pay run status
          type: string
          enum:
          - Draft
          - Posted
        payRunType:
          description: Pay run type
          type: string
          enum:
          - Scheduled
          - Unscheduled
          - EarlierYearUpdate
        calendarType:
          description: Calendar type of the pay run
          type: string
          enum:
          - Weekly
          - Fortnightly
          - FourWeekly
          - Monthly
          - Annual
          - Quarterly
        postedDateTime:
          description: Posted date time of the pay run
          type: string
          format: date 
          x-is-date: true 
        paySlips:
          type: array
          items:
            $ref: '#/components/schemas/Payslip'
    PayslipObject:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        paySlip:
          $ref: '#/components/schemas/Payslip'
    Payslips:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        paySlips:
          type: array
          items:
            $ref: '#/components/schemas/Payslip'
    Payslip:
      type: object
      properties:
        paySlipID:
          description: The Xero identifier for a Payslip
          type: string
          format: uuid 
        employeeID:
          description: The Xero identifier for payroll employee
          type: string
          format: uuid 
        payRunID:
          description: The Xero identifier for the associated payrun
          type: string
          format: uuid 
        lastEdited:
          description: The date payslip was last updated
          type: string
          format: date 
          x-is-datetime: true 
        firstName:
          description: Employee first name
          type: string
        lastName:
          description: Employee last name
          type: string
        totalEarnings:
          description: Total earnings before any deductions. Same as gross earnings for NZ.
          type: number
          format: double 
        grossEarnings:
          description: Total earnings before any deductions. Same as total earnings for NZ.
          type: number
          format: double 
        totalPay:
          description: The employee net pay
          type: number
          format: double 
        totalEmployerTaxes:
          description: The employer's tax obligation
          type: number
          format: double 
        totalEmployeeTaxes:
          description: The part of an employee's earnings that is deducted for tax purposes
          type: number
          format: double 
        totalDeductions:
          description: Total amount subtracted from an employee's earnings to reach total pay
          type: number
          format: double 
        totalReimbursements:
          description: Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment
          type: number
          format: double
        totalStatutoryDeductions:
          description: Total amounts required by law to subtract from the employee's earnings
          type: number
          format: double
        totalSuperannuation:
          description: Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries
          type: number
          format: double
        bacsHash:
          description: BACS Service User Number
          type: string 
        paymentMethod:
          description: The payment method code
          type: string
          enum:
            - Cheque
            - Electronically
            - Manual
        earningsLines:
          $ref: '#/components/schemas/EarningsLines'
        leaveEarningsLines:
          $ref: '#/components/schemas/LeaveEarningsLines'
        timesheetEarningsLines:
          $ref: '#/components/schemas/TimesheetEarningsLines'
        deductionLines:
          $ref: '#/components/schemas/DeductionLines'
        reimbursementLines:
          $ref: '#/components/schemas/ReimbursementLines'
        leaveAccrualLines:
          $ref: '#/components/schemas/LeaveAccrualLines'
        superannuationLines:
          $ref: '#/components/schemas/SuperannuationLines'
        paymentLines:
          $ref: '#/components/schemas/PaymentLines'
        employeeTaxLines:
          $ref: '#/components/schemas/TaxLines'
        employerTaxLines:
          $ref: '#/components/schemas/TaxLines'
        statutoryDeductionLines:
          $ref: '#/components/schemas/StatutoryDeductionLines'
        taxSettings:
          $ref: '#/components/schemas/TaxSettings'
        grossEarningsHistory:
          $ref: '#/components/schemas/GrossEarningsHistory'
    EarningsLines:
      type: array
      items:
        $ref: '#/components/schemas/EarningsLine'
    EarningsLine:
      type: object
      properties:
        earningsLineID:
          description: Xero identifier for payroll earnings line
          type: string
          format: uuid
        earningsRateID:
          description: Xero identifier for payroll earnings rate
          type: string
          format: uuid 
        displayName:
          description: name of earnings rate for display in UI
          type: string
        ratePerUnit:
          description: Rate per unit for earnings line
          type: number
          format: double 
        numberOfUnits:
          description: Earnings number of units
          type: number
          format: double 
        fixedAmount:
          description: Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
          type: number
          format: double 
        amount:
          description: The amount of the earnings line.
          type: number
          format: double 
        isLinkedToTimesheet:
          description: Identifies if the earnings is taken from the timesheet. False for earnings line
          type: boolean
        isAverageDailyPayRate:
          description: Identifies if the earnings is using an average daily pay rate
          type: boolean
        isSystemGenerated:
          description: Flag to indentify whether the earnings line is system generated or not.
          type: boolean
    LeaveEarningsLines:
      type: array
      items:
        $ref: '#/components/schemas/LeaveEarningsLine'
    LeaveEarningsLine:
      type: object
      properties:
        earningsLineID:
          description: Xero identifier for payroll earnings line
          type: string
          format: uuid
        earningsRateID:
          description: Xero identifier for payroll leave earnings rate
          type: string
          format: uuid
        displayName:
          description: name of earnings rate for display in UI
          type: string 
        ratePerUnit:
          description: Rate per unit for leave earnings line
          type: number
          format: double 
        numberOfUnits:
          description: Leave earnings number of units
          type: number
          format: double 
        fixedAmount:
          description: Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
          type: number
          format: double 
        amount:
          description: The amount of the earnings line.
          type: number
          format: double 
        isLinkedToTimesheet:
          description: Identifies if the leave earnings is taken from the timesheet. False for leave earnings line
          type: boolean
        isAverageDailyPayRate:
          description: Identifies if the earnings is using an average daily pay rate
          type: boolean
        isSystemGenerated:
          description: Flag to indentify whether the earnings line is system generated or not.
          type: boolean
    TimesheetEarningsLines:
      type: array
      items:
        $ref: '#/components/schemas/TimesheetEarningsLine'
    TimesheetEarningsLine:
      type: object
      properties:
        earningsLineID:
          description: Xero identifier for payroll earnings line
          type: string
          format: uuid
        earningsRateID:
          description: Xero identifier for payroll leave earnings rate
          type: string
          format: uuid
        displayName:
          description: name of earnings rate for display in UI
          type: string 
        ratePerUnit:
          description: Rate per unit for leave earnings line
          type: number
          format: double 
        numberOfUnits:
          description: Leave earnings number of units
          type: number
          format: double 
        fixedAmount:
          description: Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
          type: number
          format: double 
        amount:
          description: The amount of the earnings line.
          type: number
          format: double 
        isLinkedToTimesheet:
          description: Identifies if the leave earnings is taken from the timesheet. False for leave earnings line
          type: boolean
        isAverageDailyPayRate:
          description: Identifies if the earnings is using an average daily pay rate
          type: boolean
        isSystemGenerated:
          description: Flag to indentify whether the earnings line is system generated or not.
          type: boolean
    DeductionLines:
      type: array
      items:
        $ref: '#/components/schemas/DeductionLine'
    DeductionLine:
      type: object
      properties:
        deductionTypeID:
          description: Xero identifier for payroll deduction
          type: string
          format: uuid
        displayName:
          description: name of earnings rate for display in UI
          type: string 
        amount:
          description: The amount of the deduction line
          type: number
          format: double 
        subjectToTax:
          description: Identifies if the deduction is subject to tax
          type: boolean
        percentage:
          description: Deduction rate percentage
          type: number
          format: double 
    ReimbursementLines:
      type: array
      items:
        $ref: '#/components/schemas/ReimbursementLine'
    ReimbursementLine:
      type: object
      properties:
        reimbursementTypeID:
          description: Xero identifier for payroll reimbursement
          type: string
          format: uuid
        description:
          description: Reimbursement line description
          type: string
        amount:
          description: Reimbursement amount
          type: number
          format: double
        ratePerUnit:
          description: Rate per unit for leave earnings line
          type: number
          format: double 
        numberOfUnits:
          description: Leave earnings number of units
          type: number
          format: double 
    LeaveAccrualLines:
      type: array
      items:
        $ref: '#/components/schemas/LeaveAccrualLine'
    LeaveAccrualLine:
      type: object
      properties:
        leaveTypeID:
          description: Xero identifier for the Leave type
          type: string
          format: uuid 
        numberOfUnits:
          description: Leave accrual number of units
          type: number
          format: double 
    SuperannuationLines:
      type: array
      items:
        $ref: '#/components/schemas/SuperannuationLine'
    SuperannuationLine:
      type: object
      properties:
        superannuationTypeID:
          description: Xero identifier for payroll superannucation type
          type: string
          format: uuid 
        displayName:
          description: Benefit display name
          type: string 
        amount:
          description: The amount of the superannuation line
          type: number
          format: double 
        fixedAmount:
          description: Superannuation fixed amount
          type: number
          format: double 
        percentage:
          description: Superannuation rate percentage
          type: number
          format: double 
        manualAdjustment:
          description: manual adjustment made
          type: boolean 
    PaymentLines:
      type: array
      items:
        $ref: '#/components/schemas/PaymentLine'
    PaymentLine:
      type: object
      properties:
        paymentLineID:
          description: Xero identifier for payroll payment line
          type: string
          format: uuid 
        amount:
          description: The amount of the payment line
          type: number
          format: double 
        accountNumber:
          description: The account number
          type: string
        sortCode:
          description: The account sort code
          type: string 
        accountName:
          description: The account name
          type: string
    TaxLines:
      type: array
      items:
        $ref: '#/components/schemas/TaxLine'
    TaxLine:
      type: object
      properties:
        taxLineID:
          description: Xero identifier for payroll tax line
          type: string
          format: uuid
        description:
          description: Tax line description
          type: string
        amount:
          description: The amount of the tax line
          type: number
          format: double 
        globalTaxTypeID: 
          description: Tax type ID
          type: string
        manualAdjustment: 
          description: Identifies if the tax line is a manual adjustment
          type: boolean
    StatutoryDeductionLines:
      type: array
      items:
        $ref: '#/components/schemas/StatutoryDeductionLine'
    StatutoryDeductionLine:
      type: object
      properties:
        statutoryDeductionTypeID:
          description: Xero identifier for payroll statutory deduction type
          type: string
          format: uuid 
        amount:
          description: The amount of the statutory deduction line
          type: number
          format: double 
        fixedAmount:
          description: Fixed Amount
          type: number
          format: double
        manualAdjustment: 
          description: Identifies if the tax line is a manual adjustment
          type: boolean
    TaxSettings:
      type: object
      properties:
        periodUnits:
          description: The number of units for the period type
          type: number
          format: integer
        periodType:
          description: The type of period ("weeks" or "months")
          type: string
          enum:
            - weeks
            - months
          example: "weeks"
        taxCode:
          $ref: '#/components/schemas/TaxCode'
        specialTaxRate:
          description: Tax rate for STC and WT
          type: string
        lumpSumTaxCode:
          description: Tax code for a lump sum amount
          type: string
        lumpSumAmount:
          description: The total of the lump sum amount
          type: string
    GrossEarningsHistory:
      type: object
      properties:
        daysPaid:
          description: Number of days the employee worked in the pay period (0 - 365)
          type: number
          format: integer
        unpaidWeeks: 
          description: Number of full weeks the employee didn't work in the pay period (0 - 52)
          type: number
          format: integer
    Settings:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        settings:
          $ref: '#/components/schemas/Accounts'
    Accounts:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    Account:
      type: object
      properties:
        accountID:
          description: The Xero identifier for Settings.
          type: string
          format: uuid 
        type:
          description: The assigned AccountType
          type: string
          enum:
          - PAYELIABILITY
          - WAGESPAYABLE
          - WAGESEXPENSE
          - BANK
        code:
          description: A unique 3 digit number for each Account
          type: string
        name:
          description: Name of the Account.
          type: string
    Address:
      type: object
      required:
        - addressLine1
        - city
        - postCode
      properties:
        addressLine1:
          description: Address line 1 for employee home address
          type: string
          example: 19 Taranaki Street
        addressLine2:
          description: Address line 2 for employee home address
          type: string
          example: Apt 4
        city:
          description: Suburb for employee home address
          type: string
          example: Wellington
        suburb:
          description: Suburb for employee home address
          type: string
          example: Te Aro
        postCode:
          description: PostCode for employee home address
          type: string
          example: 6011
        countryName:
          description: Country of HomeAddress
          type: string
          example: NEW ZEALAND
    BankAccounts:
      type: array
      items:
        $ref: '#/components/schemas/BankAccount'
    BankAccount:
      type: object
      required:
        - accountName
        - accountNumber
        - sortCode
      properties:
        accountName:
          description: Bank account name (max length = 32)
          type: string
        accountNumber:
          description: Bank account number (digits only; max length = 8)
          type: string
        sortCode:
          description: Bank account sort code (6 digits)
          type: string
        particulars:
          description: Particulars that appear on the statement.
          type: string
        code:
          description: Code of a transaction that appear on the statement.
          type: string
        dollarAmount:
          description: Dollar amount of a transaction.
          type: number
          format: double
        reference:
          description: Statement Text/reference for a transaction that appear on the statement.
          type: string
        calculationType:
          description: Calculation type for the transaction can be 'Fixed Amount' or 'Balance'
          type: string
          enum:
            - FixedAmount
            - Balance
    TrackingCategories:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        problem:
          $ref: '#/components/schemas/Problem'
        trackingCategories:
          $ref: '#/components/schemas/TrackingCategory'
    TrackingCategory:
      type: object
      properties:
        employeeGroupsTrackingCategoryID:
          description: The Xero identifier for Employee groups tracking category.
          type: string
          format: uuid
        timesheetTrackingCategoryID:
          description: The Xero identifier for Timesheet tracking category.
          type: string
          format: uuid