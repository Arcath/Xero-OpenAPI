openapi: 3.0.0
info:
  version: "1.0.0"
  title: Bank Feeds API
  description: The Xero Bank Feeds API 
  contact: 
    name: Xero API team
    email: api@xero.com
  license:
    name: MIT 
    url: 'https://github.com/XeroAPI/Xero-OpenAPI/blob/master/LICENSE'
servers:
  - url: 'https://api.xero.com/bankfeeds.xro/1.0'
  - url: 'https://virtserver.swaggerhub.com/Xero/bankfeeds/1.0.0'
servers:
  - description: Xero Bank Feeds API base url
    url: https://api.xero.com/bankfeeds.xro/1.0/
paths:
  /FeedConnections:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [bankfeeds]
      tags:
        - BankFeeds
      summary: searches feed connections
      operationId: getFeedConnections
      description:  By passing in the appropriate options, you can search for available feed connections in the system
      parameters: 
        - name: page
          in: query
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page=1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. 
          schema: 
            type: integer
            example: 1
        - name: pageSize
          in: query
          description: Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize=100 to specify page size of 100. 
          schema: 
            type: integer
            example: 100
      responses:
        '201':
          description: Success - return response of type FeedConnections array with 0 to n FeedConnection objects 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedConnections'
              example: 
                pagination: 
                  {
                    "page": 1,
                    "pageSize": 20,
                    "pageCount": 1,
                    "itemCount": 2
                  }
                items: 
                  [
                    {
                      "id": "50d3cf8d-95dc-4466-8dc0-47e6d1197e28",
                      "accountToken": "10000123",
                      "accountNumber": "3809087654321500",
                      "accountName": "Joe's Savings Account",
                      "accountType": "BANK",
                      "currency": "AUD"
                    },
                    {
                      "id": "cab0d76e-1325-4d81-b5f8-5a8fadecbe87",
                      "accountToken": "10000124",
                      "accountNumber": "1234",
                      "accountName": "Sam's Credit Card",
                      "accountType": "CREDITCARD",
                      "currency": "AUD"
                    }
                  ]
        '400':
          description: bad input parameter
      post:
        security:
          - OAuth2: [bankfeeds]
        tags:
          - BankFeeds
        summary: create one or more new feed connection
        operationId: createFeedConnections
        description: By passing in the FeedConnections array populated with FeedConnection objects tom create one or more new feed connections in the system
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedConnections'
              example:
                items:
                  [
                    {
                      "AccountToken": "10058695",
                      "AccountNumber": "3809058454321500",
                      "AccountName": "Mike's Savings Account",
                      "AccountType": "BANK",
                      "Currency": "GBP"
                    },
                    {
                      "AccountToken": "10045844",
                      "AccountNumber": "3809058887441500",
                      "AccountName": "Gee's Saving's Account",
                      "AccountType": "BANK",
                      "Currency": "GBP",
                      "Country": "GB"
                    }
                  ]
          description: Feed Connection(s) to add
        responses:
          '201':
            description: Successfully created new feed connections - return response of type FeedConnections array with 0 to n FeedConnection objects 
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FeedConnections'
                example: 
                  items: 
                    [
                      { 
                        "AccountToken": "10058695",
                        "Status": "PENDING"
                        
                      },
                      {
                        "accountToken": "10045844",
                        "status": "REJECTED",
                        "error": {
                          "type": "feed-already-connected-in-current-organisation",
                          "title": "Feed Connection failed",
                          "detail": "The AccountToken is already connected to another Xero Bank Account associated with this bank in the selected Xero Organisation.",
                        }
                      }
                    ]
          '400':
            description: 'invalid input, object invalid'
  /FeedConnections/{id}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [bankfeeds]
      tags:
        - BankFeeds
      summary: get single feed connection by id
      operationId: getFeedConnection
      description: By passing in a FeedConnection Id options, you can search for available feed connections in the system
      parameters: 
        - name: id
          in: path
          required: true
          description: feed connection id for single object
          schema: 
            type: string 
            example: 50d3cf8d-95dc-4466-8dc0-47e6d1197e28
      responses:
        '200':
          description: Success - return single FeedConnection object that matches the resource id 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedConnection'
              example: 
                {
                  "id": "50d3cf8d-95dc-4466-8dc0-47e6d1197e28",
                  "accountToken": "10000123",
                  "accountNumber": "3809087654321500",
                  "accountName": "Joe's Savings Account",
                  "accountType": "BANK",
                  "currency": "AUD"
                }
        '400':
          description: bad input parameter
  /FeedConnections/DeleteRequests:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    post:
      security:
        - OAuth2: [bankfeeds]
      tags:
        - BankFeeds
      summary: delete an exsiting feed connection
      operationId: deleteFeedConnections
      description: By passing in a FeedConnections array with a valid FeedConnection obect in body to delete in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedConnections'
            example:
              items: [
                      {
                        "id": "50d3cf8d-95dc-4466-8dc0-47e6d1197e28"
                      },
                      {
                        "accountToken": "10000123"
                      }
                    ]
        description: Feed Connections to delete
      responses:
        '202':
          description: Success - delete single FeedConnection object that matches the resource id 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedConnections'
              example: 
                  items: [
                    {
                      "id": "50d3cf8d-95dc-4466-8dc0-47e6d1197e28",
                      "accountToken": "10000123",
                      "status": "PENDING"
                    },
                    {
                      "accountToken": "10000125",
                      "status": "REJECTED",
                      "error": {
                        "type": "feed-connected-in-different-organisation",
                        "title": "Feed connected in different organisation",
                        "detail": "The AccountToken is connected to another Xero Bank Account associated with this bank. This Xero Bank Account belongs to a different Xero Organisation."
                      }
                    }
                  ]
        '400':
          description: bad input parameter
  /Statements:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [bankfeeds]
      tags:
        - BankFeeds
      operationId: getStatements
      description:  By passing in the appropriate options, you can search for available statements in the system
      parameters:
        - in: query
          name: page
          required: false
          description: Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page=1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. 
          schema:
            type: integer
            format: int32
        - in: query
          name: pageSize
          required: false
          description: Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize=100 to specify page size of 100. 
          schema:
            type: integer
            format: int32
        - name: Xero-Application-Id
          in: header
          required: false
          schema:
            type: string
            default: 00000000-0000-0000-0000-0000000010000
        - name: Xero-User-Id
          in: header
          required: false
          schema:
            type: string
            default: 00000000-0000-0000-0000-0000030000000
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statements'
              example: 
                pagination: 
                  {
                    "page": 1,
                    "pageCount": 1,
                    "pageSize": 50,
                    "itemCount": 3
                  }
                items: 
                  [
                    { 
                      "id": "ba4f3127-5e46-427d-80ea-dea2fcd26afe",
                      "feedConnectionId": "87cb0dc8-fa32-409c-b622-19f8de8dcc83",
                      "status": "PENDING",
                      "startDate": "2018-07-27",
                      "endDate": "2018-07-27",
                      "startBalance": {
                          "amount": "9.0000",
                          "creditDebitIndicator": "DEBIT"
                      },
                      "endBalance": {
                          "amount": "10.1340",
                          "creditDebitIndicator": "DEBIT"
                      },
                      "statementLineCount": "1"
                    }
                  ]
        '400':
          description: bad input parameter
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Statements'
              example:  {
                          "type": "invalid-request",
                          "title": "Invalid Request",
                          "status": 400,
                          "detail": "For the request field missing parameter."
                        }
    post:
      security:
        - OAuth2: [bankfeeds]
      tags:
        - BankFeeds
      operationId: createStatements
      description:  By passing in a Statements array with Statement objects in the body, you can create bank statements in the system
      responses:
        '202':
          description: Success - return Statements array with newly created Statement objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statements'
              example:  
                items: [
                        {
                          "id": "ed8580c9-fe82-4692-be66-9fc9c1c9a918",
                          "feedConnectionId": "5a896e9e-7dce-4b64-b2c5-2a51abedcac0",
                          "status": "REJECTED",
                          "errors": [
                            {
                              "type": "duplicate-statement",
                              "title": "Duplicate Statement Received",
                              "status": 409,
                              "detail": "The received statement was marked as a duplicate."
                            }
                          ]
                        },
                        {
                          "id": "26c52a2b-a92d-4d0f-9d38-6e217ef5c0f3",
                          "feedConnectionId": "746f347a-e58d-4906-98ab-9dfaa04f3cf2",
                          "status": "PENDING"
                        }
                      ]
        '400':
          description: Statement failed validation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Statements'
              example:  {
                          "type": "invalid-request",
                          "title": "Invalid Request",
                          "status": 400,
                          "detail": "For the request field 'StatementLine.ChequeNumber' exceeded the maximum length of 20."
                        }
        '403':
          description: Invalid application or feed connection
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
              example: {
                          "type": "invalid-application",
                          "title": "Invalid Application",
                          "status": 403,
                          "detail": "The application has not been configured to use these API endpoints."
                        }
        '409':
          description: Duplicate statement received
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Statements'
              example:  {
                          "type": "duplicate-statement",
                          "title": "Duplicate Statement Received",
                          "status": 409,
                          "detail": "The received statement was marked as a duplicate."
                        }
        '413':
          description: Statement exceeds size limit
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Statements'
              example:  {
                          "type": "invalid-request",
                          "title": "Request too large",
                          "status": 413,
                          "detail": "Request size of 3500000 bytes exceeds the limit of 3000000 bytes."
                        }
        '422':
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Statements'
              example:  {
                          "type": "invalid-end-balance",
                          "title": "Invalid End Balance",
                          "status": 422,
                          "detail": "End balance does not match start balance +/- statement line amounts."
                        }
        '500':
          description: Intermittent Xero Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Statements'
              example:  {
                          "type": "internal-error",
                          "title": "Intermittent Internal Xero Error",
                          "status": 500,
                          "detail": "The request should be retried. If the error persists, a Xero support issue should be raised."
                        }
      requestBody:
        description:  Body with Statements array of Statement objects
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statements'
            example:
              items: [
                       {
                         "feedConnectionId": "5a896e9e-7dce-4b64-b2c5-2a51abedcac0",
                         "startDate": "2018-06-10",
                         "endDate": "2018-06-11",
                         "startBalance": {
                            "amount": 100.00,
                            "creditDebitIndicator": "DEBIT"
                         },
                         "endBalance": {
                            "amount": 110.00,
                            "creditDebitIndicator": "DEBIT"
                         },
                         "statementLines": [
                           {
                             "postedDate": "2018-06-10",
                             "description": "Description for statement line 1",
                             "amount": 5.00,
                             "creditDebitIndicator": "CREDIT",
                             "transactionId": "transaction-id-1"
                           },
                           {
                             "postedDate": "2018-06-10",
                             "description": "Description for statement line 2",
                             "amount": 5.00,
                             "creditDebitIndicator": "CREDIT",
                             "transactionId": "transaction-id-2",
                  
                             "payeeName": "Payee name for statement line 2",
                             "reference": "Reference for statement line 2",
                             "chequeNumber": "021"
                           }
                         ]
                       },
                       {
                         "feedConnectionId": "746f347a-e58d-4906-98ab-9dfaa04f3cf2",
                         "startDate": "2018-06-10",
                         "endDate": "2018-06-11",
                         "startBalance": {
                            "amount": 200.00,
                            "creditDebitIndicator": "DEBIT"
                         },
                         "endBalance": {
                            "amount": 215.50,
                            "creditDebitIndicator": "DEBIT"
                         },
                         "statementLines": [
                           {
                             "postedDate": "2018-06-10",
                             "description": "Description for statement line 1",
                             "amount": 5.50,
                             "creditDebitIndicator": "CREDIT",
                             "transactionId": "transaction-id-10"
                           },
                           {
                             "postedDate": "2018-06-10",
                             "description": "Description for statement line 2",
                             "amount": 10.00,
                             "creditDebitIndicator": "CREDIT",
                             "transactionId": "transaction-id-11",
                  
                             "payeeName": "Payee name for statement line 2",
                             "reference": "Reference for statement line 2",
                             "chequeNumber": "031"
                           }
                         ]
                       }
                     ]
  /Statements/{statementId}:
    parameters:
      - $ref: '#/components/parameters/requiredHeader'
    get:
      security:
        - OAuth2: [bankfeeds]
      tags:
        - BankFeeds
      operationId: getStatement
      description:  By passing in a unique id, you can search for matching statement in the system
      parameters:
        - name: statementId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching id for single statement object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statement'
              example: 
                { 
                  "id": "ba4f3127-5e46-427d-80ea-dea2fcd26afe",
                  "feedConnectionId": "87cb0dc8-fa32-409c-b622-19f8de8dcc83",
                  "status": "PENDING",
                  "startDate": "2018-07-27",
                  "endDate": "2018-07-27",
                  "startBalance": {
                      "amount": "9.0000",
                      "creditDebitIndicator": "DEBIT"
                  },
                  "endBalance": {
                      "amount": "10.1340",
                      "creditDebitIndicator": "DEBIT"
                  },
                  "statementLineCount": "1"
                }
        '404':
          description: Statement not found
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: For more information see oAuth 2 documentation https://developer.xero.com/documentation/oauth2/overview
      flows: 
        authorizationCode:
          authorizationUrl: 'https://login.xero.com/identity/connect/authorize'
          tokenUrl: 'https://identity.xero.com/connect/token'
          scopes:
            email: Grant read-only access to your email
            openid: Grant read-only access to your open id
            profile: Grant read-only your profile information
            bankfeeds: Grant read-write access to bankfeeds 
  parameters:
    requiredHeader: 
      in: header
      name: Xero-Tenant-Id
      description: Xero identifier for Tenant (organisation, practice, etc)
      schema:
        type: string
      required: true 
  schemas:
    FeedConnections:
      description: Array of bank feed connection objects and pagination properties
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          type: array
          items:
            $ref: '#/components/schemas/FeedConnection'
    FeedConnection:
      description: bank feed connection object
      type: object
      required:
        - id
      properties:
        id:
          description: Unique identifier for bank feed connection
          type: string
          example: "0d3cf8d-95dc-4466-8dc0-47e6d1197e28"
        accountToken:
          description: This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.
          type: string
          example: "10000123"
        accountNumber: 
          description: String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD.The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.
          type: string
          example: "3809087654321500"
        accountName:
          description: The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.
          type: string
          example: "Joe's Savings Account"
        accountId:
          description: Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.
          type: string
          example: "079a88ea-276d-41fb-a1f1-366ef3e22921"
        accountType:
          description: High level bank account type i.e BANK CREDITCARD BANK encompasses all bank account types other than credit cards.
          enum: [BANK,CREDITCARD]
          example: "BANK"
        currency:
          description: ISO-4217 currency code, e.g. USD, AUD.
          type: string
          example: "AUD"
        country:
          description: ISO-3166 alpha-2 country code, e.g. US, AU. This element is required only when the Application supports multi-region. Talk to your Partner Manager to confirm if this is the case.
          type: string
          example: "GB"
        status:
          description: The current status of feed connection.
          type: string
          enum: [PENDING,REJECTED]
          example: "REJECTED"
        error:
          $ref: '#/components/schemas/Error'
    Statements:
      description: Array of Bank statements (collections of financial transaction data) per bank account. 
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Statement'
    Pagination:
      properties:
        page:
          description: Page number which specifies the set of records retrieved.
          type: integer
          example: 1
        pageSize: 
          description: Page size which specifies how many records per pages returned (default 10).
          type: integer
          example: 10
        pageCount: 
          description: Number of pages available
          type: integer
          example: 1
        itemCount: 
          description: Number of items in current page.
          type: integer
          example: 2
    Statement:
      description: Bank statement (collections of financial transaction data) per bank account. 
      type: object
      required:
        - id
      properties:
        id:
          description: Unique id in Xero
          type: string
          example: "ba4f3127-5e46-427d-80ea-dea2fcd26afe"
        feedConnectionId:
          description: The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered.
          type: string
          example: "87cb0dc8-fa32-409c-b622-19f8de8dcc83"
        status:
          description: Status of statement
          enum: ["PENDING","REJECTED","DELIVERED"]
          example: "PENDING"
        startDate:
          description: Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
          type: string
          format: date
          example: "2018-07-27"
        endDate:
          description: Closing balance date ISO-8601 YYYY-MM-DD
          type: string
          format: date
          example: "2018-07-27"
        startBalance:
          $ref: '#/components/schemas/StartBalance'
        endBalance:
          $ref: '#/components/schemas/EndBalance'
        statementLines:
            description: See Elements for Statement Line object
            $ref: '#/components/schemas/StatementLines'
        errors:
          description: See Elements for Error object
          type: array
          items:
            $ref: '#/components/schemas/Error'
        statementLineCount:
          description: total number of statement lines
          type: integer
          example: 1
    StartBalance:
      description: See Elements for Start/End Balance
      type: object
      properties:
        amount:
          description: Amount of starting balance
          type: string
          example: "9.0000"
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
    EndBalance:
      description: The StartBalance plus all the Statement Line Amounts should be equal to the EndBalance Amount.
      type: object
      properties:
        amount:
          description: Amount of ending balance
          type: string
          example: "10.1340"
        creditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
    StatementLines:
      description: an array of StatementLine objects
      type: array
      items:
        $ref: '#/components/schemas/StatementLine'
    StatementLine:
      type: object
      properties:
        postedDate:
          description: The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD
          type: string
          format: date
          example: "2018-06-10"
        description: 
          description: Transaction description
          type: string
          example: "Description for statement line 2"
        amount: 
          description: Transaction amount
          type: string
          example: "5.00"
        creditDebitIndicator: 
          $ref: '#/components/schemas/CreditDebitIndicator'
        transactionId: 
          description: Financial institute's internal transaction identifier. If provided this field is factored into duplicate detection.
          type: string
          example: "transaction-id-2"
        payeeName: 
          description: Typically the merchant or payee name
          type: string
          example: "Payee name for statement line 2"
        reference: 
          description: Optional field to enhance the Description
          type: string
          example: "Reference for statement line 2"
        chequeNumber: 
          description: The cheque/check number
          type: string
          example: "021"
    Error:
      type: object
      description: On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json.
      properties:
        title:
          description: Human readable high level error description.
          type: string
          example: "Invalid Application"
        status:
          description: The numeric HTTP Status Code, e.g. 404
          type: integer
          example: 403
        detail:
          description: Human readable detailed error description.
          type: string
          example: "The application has not been configured to use these API endpoints."
        type:
          description: Identifies the type of error.
          type: string
          enum: 
          - "invalid-request"
          - "invalid-application"
          - "invalid-feed-connection"
          - "duplicate-statement"
          - "invalid-end-balance"
          - "invalid-start-and-end-date"
          - "invalid-start-date"
          - "internal-error"
          example: "invalid-application"
    CreditDebitIndicator:
      description: If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
      type: string
      enum:
        - CREDIT
        - DEBIT